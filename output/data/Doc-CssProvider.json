{
    "isAbstract": false, 
    "leaf": true, 
    "name": "CssProvider", 
    "text": "CssProvider", 
    "interfaces": [
        [
            "StyleProvider"
        ]
    ], 
    "parents": [
        "CssProvider", 
        "GObject.Object"
    ], 
    "members": {
        "signals": [
            {
                "version": "", 
                "when": "last", 
                "name": "parsing-error", 
                "description": "Signals that a parsing error occured. the @path, @line and @position\ndescribe the actual location of the error as accurately as possible.\n\nParsing errors are never fatal, so the parsing will resume after\nthe error. Errors may however cause parts of the given\ndata or even all of it to not be parsed at all. So it is a useful idea\nto check that the parsing succeeds by connecting to this signal.\n\nNote that this signal may be emitted at any time as the css provider\nmay opt to defer parsing parts or all of the input to a later time\nthan when a loading function was called."
            }
        ], 
        "methods": [
            {
                "isConstructor": true, 
                "returns": {
                    "doc": "A new #GtkCssProvider", 
                    "name": "ref:Gtk.CssProvider"
                }, 
                "version": null, 
                "name": "Gtk.CssProvider()", 
                "parameters": null
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the data could be loaded."
                }, 
                "version": "", 
                "name": "load_from_data", 
                "parameters": [
                    {
                        "type": "Integer[]", 
                        "name": "data", 
                        "description": "CSS data loaded in memory"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "length", 
                        "description": "the length of @data in bytes, or -1 for NUL terminated strings. If @length is not -1, the code will assume it is not NUL terminated and will potentially do a copy."
                    }
                ], 
                "description": "Loads @data into @css_provider, making it clear any previously loaded\ninformation."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the data could be loaded."
                }, 
                "version": "", 
                "name": "load_from_file", 
                "parameters": [
                    {
                        "type": "Gio.File", 
                        "name": "file", 
                        "description": "#GFile pointing to a file to load"
                    }
                ], 
                "description": "Loads the data contained in @file into @css_provider, making it\nclear any previously loaded information."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the data could be loaded."
                }, 
                "version": "", 
                "name": "load_from_path", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "path", 
                        "description": "the path of a filename to load, in the GLib filename encoding"
                    }
                ], 
                "description": "Loads the data contained in @path into @css_provider, making it clear\nany previously loaded information."
            }, 
            {
                "returns": {
                    "type": "String", 
                    "description": "a new string representing the @provider."
                }, 
                "version": "3.2", 
                "name": "to_string", 
                "parameters": null, 
                "description": "Convertes the @provider into a string representation in CSS\nformat.\n\nUsing gtk_css_provider_load_from_data() with the return value\nfrom this function on a new provider created with\ngtk_css_provider_new() will basicallu create a duplicate of\nthis @provider."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "parsing_error", 
                "parameters": [
                    {
                        "type": "ref:Gtk.CssSection", 
                        "name": "section", 
                        "description": ""
                    }, 
                    {
                        "type": "GLib.Error", 
                        "name": "error", 
                        "description": ""
                    }
                ], 
                "description": ""
            }
        ], 
        "properties": []
    }, 
    "fullname": "Class Gtk.CssProvider", 
    "id": "Docs-CssProvider", 
    "description": "GtkCssProvider is an object implementing the #GtkStyleProvider interface.\nIt is able to parse <ulink url=\"http://www.w3.org/TR/CSS2\">CSS</ulink>-like\ninput in order to style widgets.\n\n<refsect2 id=\"gtkcssprovider-files\">\n<title>Default files</title>\n<para>\nAn application can cause GTK+ to parse a specific CSS style sheet by\ncalling gtk_css_provider_load_from_file() and adding the provider with\ngtk_style_context_add_provider() or gtk_style_context_add_provider_for_screen().\nIn addition, certain files will be read when GTK+ is initialized. First,\nthe file <filename><envar>$XDG_CONFIG_HOME</envar>/gtk-3.0/gtk.css</filename>\nis loaded if it exists. Then, GTK+ tries to load\n<filename><envar>$HOME</envar>/.themes/<replaceable>theme-name</replaceable>/gtk-3.0/gtk.css</filename>,\nfalling back to\n<filename><replaceable>datadir</replaceable>/share/themes/<replaceable>theme-name</replaceable>/gtk-3.0/gtk.css</filename>,\nwhere <replaceable>theme-name</replaceable> is the name of the current theme\n(see the #GtkSettings:gtk-theme-name setting) and <replaceable>datadir</replaceable>\nis the prefix configured when GTK+ was compiled, unless overridden by the\n<envar>GTK_DATA_PREFIX</envar> environment variable.\n</para>\n</refsect2>\n<refsect2 id=\"gtkcssprovider-stylesheets\">\n<title>Style sheets</title>\n<para>\nThe basic structure of the style sheets understood by this provider is\na series of statements, which are either rule sets or '@-rules', separated\nby whitespace.\n</para>\n<para>\nA rule set consists of a selector and a declaration block, which is\na series of declarations enclosed in curly braces ({ and }). The\ndeclarations are separated by semicolons (;). Multiple selectors can\nshare the same declaration block, by putting all the separators in\nfront of the block, separated by commas.\n</para>\n<example><title>A rule set with two selectors</title>\n<programlisting language=\"text\">\nGtkButton, GtkEntry {\ncolor: &num;ff00ea;\nfont: Comic Sans 12\n}\n</programlisting>\n</example>\n</refsect2>\n<refsect2 id=\"gtkcssprovider-selectors\">\n<title>Selectors</title>\n<para>\nSelectors work very similar to the way they do in CSS, with widget class\nnames taking the role of element names, and widget names taking the role\nof IDs. When used in a selector, widget names must be prefixed with a\n'&num;' character. The '*' character represents the so-called universal\nselector, which matches any widget.\n</para>\n<para>\nTo express more complicated situations, selectors can be combined in\nvarious ways:\n<itemizedlist>\n<listitem><para>To require that a widget satisfies several conditions,\ncombine several selectors into one by concatenating them. E.g.\n<literal>GtkButton&num;button1</literal> matches a GtkButton widget\nwith the name button1.</para></listitem>\n<listitem><para>To only match a widget when it occurs inside some other\nwidget, write the two selectors after each other, separated by whitespace.\nE.g. <literal>GtkToolBar GtkButton</literal> matches GtkButton widgets\nthat occur inside a GtkToolBar.</para></listitem>\n<listitem><para>In the previous example, the GtkButton is matched even\nif it occurs deeply nested inside the toolbar. To restrict the match\nto direct children of the parent widget, insert a '>' character between\nthe two selectors. E.g. <literal>GtkNotebook > GtkLabel</literal> matches\nGtkLabel widgets that are direct children of a GtkNotebook.</para></listitem>\n</itemizedlist>\n</para>\n<example>\n<title>Widget classes and names in selectors</title>\n<programlisting language=\"text\">\n/&ast; Theme labels that are descendants of a window &ast;/\nGtkWindow GtkLabel {\nbackground-color: &num;898989\n}\n\n/&ast; Theme notebooks, and anything that's within these &ast;/\nGtkNotebook {\nbackground-color: &num;a939f0\n}\n\n/&ast; Theme combo boxes, and entries that\nare direct children of a notebook &ast;/\nGtkComboBox,\nGtkNotebook > GtkEntry {\ncolor: @fg_color;\nbackground-color: &num;1209a2\n}\n\n/&ast; Theme any widget within a GtkBin &ast;/\nGtkBin * {\nfont: Sans 20\n}\n\n/&ast; Theme a label named title-label &ast;/\nGtkLabel&num;title-label {\nfont: Sans 15\n}\n\n/&ast; Theme any widget named main-entry &ast;/\n&num;main-entry {\nbackground-color: &num;f0a810\n}\n</programlisting>\n</example>\n<para>\nWidgets may also define style classes, which can be used for matching.\nWhen used in a selector, style classes must be prefixed with a '.'\ncharacter.\n</para>\n<para>\nRefer to the documentation of individual widgets to learn which\nstyle classes they define and see <xref linkend=\"gtkstylecontext-classes\"/>\nfor a list of all style classes used by GTK+ widgets.\n</para>\n<para>\nNote that there is some ambiguity in the selector syntax when it comes\nto differentiation widget class names from regions. GTK+ currently treats\na string as a widget class name if it contains any uppercase characters\n(which should work for more widgets with names like GtkLabel).\n</para>\n<example>\n<title>Style classes in selectors</title>\n<programlisting language=\"text\">\n/&ast; Theme all widgets defining the class entry &ast;/\n.entry {\ncolor: &num;39f1f9;\n}\n\n/&ast; Theme spinbuttons' entry &ast;/\nGtkSpinButton.entry {\ncolor: &num;900185\n}\n</programlisting>\n</example>\n<para>\nIn complicated widgets like e.g. a GtkNotebook, it may be desirable\nto style different parts of the widget differently. To make this\npossible, container widgets may define regions, whose names\nmay be used for matching in selectors.\n</para>\n<para>\nSome containers allow to further differentiate between regions by\napplying so-called pseudo-classes to the region. For example, the\ntab region in GtkNotebook allows to single out the first or last\ntab by using the :first-child or :last-child pseudo-class.\nWhen used in selectors, pseudo-classes must be prefixed with a\n':' character.\n</para>\n<para>\nRefer to the documentation of individual widgets to learn which\nregions and pseudo-classes they define and see\n<xref linkend=\"gtkstylecontext-classes\"/> for a list of all regions\nused by GTK+ widgets.\n</para>\n<example>\n<title>Regions in selectors</title>\n<programlisting language=\"text\">\n/&ast; Theme any label within a notebook &ast;/\nGtkNotebook GtkLabel {\ncolor: &num;f90192;\n}\n\n/&ast; Theme labels within notebook tabs &ast;/\nGtkNotebook tab GtkLabel {\ncolor: &num;703910;\n}\n\n/&ast; Theme labels in the any first notebook\ntab, both selectors are equivalent &ast;/\nGtkNotebook tab:nth-child(first) GtkLabel,\nGtkNotebook tab:first-child GtkLabel {\ncolor: &num;89d012;\n}\n</programlisting>\n</example>\n<para>\nAnother use of pseudo-classes is to match widgets depending on their\nstate. This is conceptually similar to the :hover, :active or :focus\npseudo-classes in CSS. The available pseudo-classes for widget states\nare :active, :prelight (or :hover), :insensitive, :selected, :focused\nand :inconsistent.\n</para>\n<example>\n<title>Styling specific widget states</title>\n<programlisting language=\"text\">\n/&ast; Theme active (pressed) buttons &ast;/\nGtkButton:active {\nbackground-color: &num;0274d9;\n}\n\n/&ast; Theme buttons with the mouse pointer on it,\nboth are equivalent &ast;/\nGtkButton:hover,\nGtkButton:prelight {\nbackground-color: &num;3085a9;\n}\n\n/&ast; Theme insensitive widgets, both are equivalent &ast;/\n:insensitive,\n*:insensitive {\nbackground-color: &num;320a91;\n}\n\n/&ast; Theme selection colors in entries &ast;/\nGtkEntry:selected {\nbackground-color: &num;56f9a0;\n}\n\n/&ast; Theme focused labels &ast;/\nGtkLabel:focused {\nbackground-color: &num;b4940f;\n}\n\n/&ast; Theme inconsistent checkbuttons &ast;/\nGtkCheckButton:inconsistent {\nbackground-color: &num;20395a;\n}\n</programlisting>\n</example>\n<para>\nWidget state pseudoclasses may only apply to the last element\nin a selector.\n</para>\n<para>\nTo determine the effective style for a widget, all the matching rule\nsets are merged. As in CSS, rules apply by specificity, so the rules\nwhose selectors more closely match a widget path will take precedence\nover the others.\n</para>\n</refsect2>\n<refsect2 id=\"gtkcssprovider-rules\">\n<title>&commat; Rules</title>\n<para>\nGTK+'s CSS supports the &commat;import rule, in order to load another\nCSS style sheet in addition to the currently parsed one.\n</para>\n<example>\n<title>Using the &commat;import rule</title>\n<programlisting language=\"text\">\n&commat;import url (\"path/to/common.css\");\n</programlisting>\n</example>\n<para id=\"css-binding-set\">\nIn order to extend key bindings affecting different widgets, GTK+\nsupports the &commat;binding-set rule to parse a set of bind/unbind\ndirectives, see #GtkBindingSet for the supported syntax. Note that\nthe binding sets defined in this way must be associated with rule sets\nby setting the gtk-key-bindings style property.\n</para>\n<para>\nCustomized key bindings are typically defined in a separate\n<filename>gtk-keys.css</filename> CSS file and GTK+ loads this file\naccording to the current key theme, which is defined by the\n#GtkSettings:gtk-key-theme-name setting.\n</para>\n<example>\n<title>Using the &commat;binding rule</title>\n<programlisting language=\"text\">\n&commat;binding-set binding-set1 {\nbind \"&lt;alt&gt;Left\" { \"move-cursor\" (visual-positions, -3, 0) };\nunbind \"End\";\n};\n\n&commat;binding-set binding-set2 {\nbind \"&lt;alt&gt;Right\" { \"move-cursor\" (visual-positions, 3, 0) };\nbind \"&lt;alt&gt;KP_space\" { \"delete-from-cursor\" (whitespace, 1)\n\"insert-at-cursor\" (\" \") };\n};\n\nGtkEntry {\ngtk-key-bindings: binding-set1, binding-set2;\n}\n</programlisting>\n</example>\n<para>\nGTK+ also supports an additional &commat;define-color rule, in order\nto define a color name which may be used instead of color numeric\nrepresentations. Also see the #GtkSettings:gtk-color-scheme setting\nfor a way to override the values of these named colors.\n</para>\n<example>\n<title>Defining colors</title>\n<programlisting language=\"text\">\n&commat;define-color bg_color &num;f9a039;\n\n&ast; {\nbackground-color: &commat;bg_color;\n}\n</programlisting>\n</example>\n</refsect2>\n<refsect2 id=\"gtkcssprovider-symbolic-colors\">\n<title>Symbolic colors</title>\n<para>\nBesides being able to define color names, the CSS parser is also able\nto read different color expressions, which can also be nested, providing\na rich language to define colors which are derived from a set of base\ncolors.\n</para>\n<example>\n<title>Using symbolic colors</title>\n<programlisting language=\"text\">\n&commat;define-color entry-color shade (&commat;bg_color, 0.7);\n\nGtkEntry {\nbackground-color: @entry-color;\n}\n\nGtkEntry:focused {\nbackground-color: mix (&commat;entry-color,\nshade (&num;fff, 0.5),\n0.8);\n}\n</programlisting>\n</example>\n<para>\nThe various ways to express colors in GTK+ CSS are:\n</para>\n<informaltable>\n<tgroup cols=\"3\">\n<thead>\n<row>\n<entry>Syntax</entry>\n<entry>Explanation</entry>\n<entry>Examples</entry>\n</row>\n</thead>\n<tbody>\n<row>\n<entry>rgb(@r, @g, @b)</entry>\n<entry>An opaque color; @r, @g, @b can be either integers between\n0 and 255 or percentages</entry>\n<entry><literallayout>rgb(128, 10, 54)\nrgb(20%, 30%, 0%)</literallayout></entry>\n</row>\n<row>\n<entry>rgba(@r, @g, @b, @a)</entry>\n<entry>A translucent color; @r, @g, @b are as in the previous row,\n@a is a floating point number between 0 and 1</entry>\n<entry><literallayout>rgba(255, 255, 0, 0.5)</literallayout></entry>\n</row>\n<row>\n<entry>&num;@xxyyzz</entry>\n<entry>An opaque color; @xx, @yy, @zz are hexadecimal numbers\nspecifying @r, @g, @b variants with between 1 and 4\nhexadecimal digits per component are allowed</entry>\n<entry><literallayout>&num;ff12ab\n&num;f0c</literallayout></entry>\n</row>\n<row>\n<entry>&commat;name</entry>\n<entry>Reference to a color that has been defined with\n&commat;define-color\n</entry>\n<entry>&commat;bg_color</entry>\n</row>\n<row>\n<entry>mix(@color1, @color2, @f)</entry>\n<entry>A linear combination of @color1 and @color2. @f is a\nfloating point number between 0 and 1.</entry>\n<entry><literallayout>mix(&num;ff1e0a, &commat;bg_color, 0.8)</literallayout></entry>\n</row>\n<row>\n<entry>shade(@color, @f)</entry>\n<entry>A lighter or darker variant of @color. @f is a\nfloating point number.\n</entry>\n<entry>shade(&commat;fg_color, 0.5)</entry>\n</row>\n<row>\n<entry>lighter(@color)</entry>\n<entry>A lighter variant of @color</entry>\n</row>\n<row>\n<entry>darker(@color)</entry>\n<entry>A darker variant of @color</entry>\n</row>\n<row>\n<entry>alpha(@color, @f)</entry>\n<entry>Modifies passed color's alpha by a factor @f. @f is a\nfloating point number. @f < 1.0 results in a more transparent\ncolor while @f > 1.0 results in a more opaque color.\n</entry>\n<entry>alhpa(blue, 0.5)</entry>\n</row>\n</tbody>\n</tgroup>\n</informaltable>\n</refsect2>\n<refsect2 id=\"gtkcssprovider-gradients\">\n<title>Gradients</title>\n<para>\nLinear or radial Gradients can be used as background images.\n</para>\n<para>\nA linear gradient along the line from (@start_x, @start_y) to\n(@end_x, @end_y) is specified using the syntax\n<literallayout>-gtk-gradient (linear,\n@start_x @start_y, @end_x @end_y,\ncolor-stop (@position, @color),\n...)</literallayout>\nwhere @start_x and @end_x can be either a floating point number between\n0 and 1 or one of the special values 'left', 'right' or 'center', @start_y\nand @end_y can be either a floating point number between 0 and 1 or one\nof the special values 'top', 'bottom' or 'center', @position is a floating\npoint number between 0 and 1 and @color is a color expression (see above).\nThe color-stop can be repeated multiple times to add more than one color\nstop. 'from (@color)' and 'to (@color)' can be used as abbreviations for\ncolor stops with position 0 and 1, respectively.\n</para>\n<example>\n<title>A linear gradient</title>\n<inlinegraphic fileref=\"gradient1.png\" format=\"PNG\"/>\n<para>This gradient was specified with\n<literallayout>-gtk-gradient (linear,\nleft top, right bottom,\nfrom(&commat;yellow), to(&commat;blue))</literallayout></para>\n</example>\n<example>\n<title>Another linear gradient</title>\n<inlinegraphic fileref=\"gradient2.png\" format=\"PNG\"/>\n<para>This gradient was specified with\n<literallayout>-gtk-gradient (linear,\n0 0, 0 1,\ncolor-stop(0, &commat;yellow),\ncolor-stop(0.2, &commat;blue),\ncolor-stop(1, &num;0f0))</literallayout></para>\n</example>\n<para>\nA radial gradient along the two circles defined by (@start_x, @start_y,\n@start_radius) and (@end_x, @end_y, @end_radius) is specified using the\nsyntax\n<literallayout>-gtk-gradient (radial,\n@start_x @start_y, @start_radius,\n@end_x @end_y, @end_radius,\ncolor-stop (@position, @color),\n...)</literallayout>\nwhere @start_radius and @end_radius are floating point numbers and\nthe other parameters are as before.\n</para>\n<example>\n<title>A radial gradient</title>\n<inlinegraphic fileref=\"gradient3.png\" format=\"PNG\"/>\n<para>This gradient was specified with\n<literallayout>-gtk-gradient (radial,\ncenter center, 0,\ncenter center, 1,\nfrom(&commat;yellow), to(&commat;green))</literallayout></para>\n</example>\n<example>\n<title>Another radial gradient</title>\n<inlinegraphic fileref=\"gradient4.png\" format=\"PNG\"/>\n<para>This gradient was specified with\n<literallayout>-gtk-gradient (radial,\n0.4 0.4, 0.1,\n0.6 0.6, 0.7,\ncolor-stop (0, &num;f00),\ncolor-stop (0.1, &num;a0f),\ncolor-stop (0.2, &commat;yellow),\ncolor-stop (1, &commat;green))</literallayout></para>\n</example>\n</refsect2>\n<refsect2 id=\"gtkcssprovider-shadows\">\n<title>Text shadow</title>\n<para>\nA shadow list can be applied to text or symbolic icons, using the CSS3\ntext-shadow syntax, as defined in\n<ulink url=\"http://www.w3.org/TR/css3-text/#text-shadow\">the CSS3 specification</ulink>.\n</para>\n<para>\nA text shadow is specified using the syntax\n<literallayout>text-shadow: @horizontal_offset @vertical_offset [ @blur_radius ] @color</literallayout>\nThe offset of the shadow is specified with the @horizontal_offset and @vertical_offset\nparameters. The optional blur radius is parsed, but it is currently not rendered by\nthe GTK+ theming engine.\n</para>\n<para>\nTo set multiple shadows on an element, you can specify a comma-separated list\nof shadow elements in the text-shadow property. Shadows are always rendered\nfront-back, i.e. the first shadow specified is on top of the others. Shadows\ncan thus overlay each other, but they can never overlay the text itself,\nwhich is always rendered on top of the shadow layer.\n</para>\n</refsect2>\n<refsect2>\n<title>Box shadow</title>\n<para>\nThemes can apply shadows on framed elements using the CSS3 box-shadow syntax,\nas defined in \n<ulink url=\"http://www.w3.org/TR/css3-background/#the-box-shadow\">the CSS3 specification</ulink>.\n</para>\n<para>\nA box shadow is specified using the syntax\n<literallayout>box-shadow: [ @inset ] @horizontal_offset @vertical_offset [ @blur_radius ] [ @spread ] @color</literallayout>\nA positive offset will draw a shadow that is offset to the right (down) of the box,\na negative offset to the left (top). The optional spread parameter defines an additional\ndistance to expand the shadow shape in all directions, by the specified radius.\nThe optional blur radius parameter is parsed, but it is currently not rendered by\nthe GTK+ theming engine.\nThe inset parameter defines whether the drop shadow should be rendered inside or outside\nthe box canvas. Only inset box-shadows are currently supported by the GTK+ theming engine,\nnon-inset elements are currently ignored.\n</para>\n<para>\nTo set multiple box-shadows on an element, you can specify a comma-separated list\nof shadow elements in the box-shadow property. Shadows are always rendered\nfront-back, i.e. the first shadow specified is on top of the others, so they may\noverlap other boxes or other shadows.\n</para>\n</refsect2>\n<refsect2 id=\"gtkcssprovider-border-image\">\n<title>Border images</title>\n<para>\nImages and gradients can also be used in slices for the purpose of creating\nscalable borders.\nFor more information, see the CSS3 documentation for the border-image property,\nwhich can be found <ulink url=\"http://www.w3.org/TR/css3-background/#border-images\">here</ulink>.\n</para>\n<inlinegraphic fileref=\"slices.png\" format=\"PNG\"/>\n<para>\nThe parameters of the slicing process are controlled by\nfour separate properties. Note that you can use the\n<literallayout>border-image</literallayout> shorthand property\nto set values for the three properties at the same time.\n</para>\n<para>\n<literallayout>border-image-source: url(@path)\n(or border-image-source: -gtk-gradient(...))</literallayout>:\nSpecifies the source of the border image, and it can either\nbe an URL or a gradient (see above).\n</para>\n<para>\n<literallayout>border-image-slice: @top @right @bottom @left</literallayout>\nThe sizes specified by the @top, @right, @bottom and @left parameters\nare the offsets, in pixels, from the relevant edge where the image\nshould be \"cut off\" to build the slices used for the rendering\nof the border.\n</para>\n<para>\n<literallayout>border-image-width: @top @right @bottom @left</literallayout>\nThe sizes specified by the @top, @right, @bottom and @left parameters\nare inward distances from the border box edge, used to specify the\nrendered size of each slice determined by border-image-slice.\nIf this property is not specified, the values of border-width will\nbe used as a fallback.\n</para>\n<para>\n<literallayout>border-image-repeat: [stretch|repeat|round|space] ? \n[stretch|repeat|round|space]</literallayout>\nSpecifies how the image slices should be rendered in the area\noutlined by border-width.\nThe default (stretch) is to resize the slice to fill in the whole \nallocated area.\nIf the value of this property is 'repeat', the image slice\nwill be tiled to fill the area.\nIf the value of this property is 'round', the image slice will\nbe tiled to fill the area, and scaled to fit it exactly\na whole number of times.\nIf the value of this property is 'space', the image slice will\nbe tiled to fill the area, and if it doesn't fit it exactly a whole\nnumber of times, the extra space is distributed as padding around \nthe slices.\nIf two options are specified, the first one affects\nthe horizontal behaviour and the second one the vertical behaviour.\nIf only one option is specified, it affects both.\n</para>\n<example>\n<title>A border image</title>\n<inlinegraphic fileref=\"border1.png\" format=\"PNG\"/>\n<para>This border image was specified with\n<literallayout>url(\"gradient1.png\") 10 10 10 10</literallayout>\n</para>\n</example>\n<example>\n<title>A repeating border image</title>\n<inlinegraphic fileref=\"border2.png\" format=\"PNG\"/>\n<para>This border image was specified with\n<literallayout>url(\"gradient1.png\") 10 10 10 10 repeat</literallayout>\n</para>\n</example>\n<example>\n<title>A stretched border image</title>\n<inlinegraphic fileref=\"border3.png\" format=\"PNG\"/>\n<para>This border image was specified with\n<literallayout>url(\"gradient1.png\") 10 10 10 10 stretch</literallayout>\n</para>\n</example>\n</refsect2>\n<refsect2 id=\"gtkcssprovider-transitions\">\n<para>Styles can specify transitions that will be used to create a gradual\nchange in the appearance when a widget state changes. The following\nsyntax is used to specify transitions:\n<literallayout>@duration [s|ms] [linear|ease|ease-in|ease-out|ease-in-out] [loop]?</literallayout>\nThe @duration is the amount of time that the animation will take for\na complete cycle from start to end. If the loop option is given, the\nanimation will be repated until the state changes again.\nThe option after the duration determines the transition function from a\nsmall set of predefined functions.\n<figure><title>Linear transition</title>\n<graphic fileref=\"linear.png\" format=\"PNG\"/>\n</figure>\n<figure><title>Ease transition</title>\n<graphic fileref=\"ease.png\" format=\"PNG\"/>\n</figure>\n<figure><title>Ease-in-out transition</title>\n<graphic fileref=\"ease-in-out.png\" format=\"PNG\"/>\n</figure>\n<figure><title>Ease-in transition</title>\n<graphic fileref=\"ease-in.png\" format=\"PNG\"/>\n</figure>\n<figure><title>Ease-out transition</title>\n<graphic fileref=\"ease-out.png\" format=\"PNG\"/>\n</figure>\n</para>\n</refsect2>\n<refsect2 id=\"gtkcssprovider-properties\">\n<title>Supported properties</title>\n<para>\nProperties are the part that differ the most to common CSS,\nnot all properties are supported (some are planned to be\nsupported eventually, some others are meaningless or don't\nmap intuitively in a widget based environment).\n</para>\n<para>\nThe currently supported properties are:\n</para>\n<informaltable>\n<tgroup cols=\"4\">\n<thead>\n<row>\n<entry>Property name</entry>\n<entry>Syntax</entry>\n<entry>Maps to</entry>\n<entry>Examples</entry>\n</row>\n</thead>\n<tbody>\n<row>\n<entry>engine</entry>\n<entry>engine-name</entry>\n<entry>#GtkThemingEngine</entry>\n<entry>engine: clearlooks;\nengine: none; /&ast; use the default (i.e. builtin) engine) &ast;/ </entry>\n</row>\n<row>\n<entry>background-color</entry>\n<entry morerows=\"2\">color (see above)</entry>\n<entry morerows=\"7\">#GdkRGBA</entry>\n<entry morerows=\"7\"><literallayout>background-color: &num;fff;\ncolor: &amp;color1;\nbackground-color: shade (&amp;color1, 0.5);\ncolor: mix (&amp;color1, &num;f0f, 0.8);</literallayout>\n</entry>\n</row>\n<row>\n<entry>color</entry>\n</row>\n<row>\n<entry>border-top-color</entry>\n<entry morerows=\"4\">transparent|color (see above)</entry>\n</row>\n<row>\n<entry>border-right-color</entry>\n</row>\n<row>\n<entry>border-bottom-color</entry>\n</row>\n<row>\n<entry>border-left-color</entry>\n</row>\n<row>\n<entry>border-color</entry>\n<entry>[transparent|color]{1,4}</entry>\n</row>\n<row>\n<entry>font-family</entry>\n<entry>@family [, @family]*</entry>\n<entry>#gchararray</entry>\n<entry>font-family: Sans, Arial;</entry>\n</row>\n<row>\n<entry>font-style</entry>\n<entry>[normal|oblique|italic]</entry>\n<entry>#PANGO_TYPE_STYLE</entry>\n<entry>font-style: italic;</entry>\n</row>\n<row>\n<entry>font-variant</entry>\n<entry>[normal|small-caps]</entry>\n<entry>#PANGO_TYPE_VARIANT</entry>\n<entry>font-variant: normal;</entry>\n</row>\n<row>\n<entry>font-weight</entry>\n<entry>[normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900]</entry>\n<entry>#PANGO_TYPE_WEIGHT</entry>\n<entry>font-weight: bold;</entry>\n</row>\n<row>\n<entry>font-size</entry>\n<entry>Font size in point</entry>\n<entry>#gint</entry>\n<entry>font-size: 13;</entry>\n</row>\n<row>\n<entry>font</entry>\n<entry>@family [@style] [@size]</entry>\n<entry>#PangoFontDescription</entry>\n<entry>font: Sans 15;</entry>\n</row>\n<row>\n<entry>margin-top</entry>\n<entry>integer</entry>\n<entry>#gint</entry>\n<entry>margin-top: 0;</entry>\n</row>\n<row>\n<entry>margin-left</entry>\n<entry>integer</entry>\n<entry>#gint</entry>\n<entry>margin-left: 1;</entry>\n</row>\n<row>\n<entry>margin-bottom</entry>\n<entry>integer</entry>\n<entry>#gint</entry>\n<entry>margin-bottom: 2;</entry>\n</row>\n<row>\n<entry>margin-right</entry>\n<entry>integer</entry>\n<entry>#gint</entry>\n<entry>margin-right: 4;</entry>\n</row>\n<row>\n<entry>margin</entry>\n<entry morerows=\"1\"><literallayout>@width\n@vertical_width @horizontal_width\n@top_width @horizontal_width @bottom_width\n@top_width @right_width @bottom_width @left_width</literallayout>\n</entry>\n<entry morerows=\"1\">#GtkBorder</entry>\n<entry morerows=\"1\"><literallayout>margin: 5;\nmargin: 5 10;\nmargin: 5 10 3;\nmargin: 5 10 3 5;</literallayout>\n</entry>\n</row>\n<row>\n<entry>padding-top</entry>\n<entry>integer</entry>\n<entry>#gint</entry>\n<entry>padding-top: 5;</entry>\n</row>\n<row>\n<entry>padding-left</entry>\n<entry>integer</entry>\n<entry>#gint</entry>\n<entry>padding-left: 5;</entry>\n</row>\n<row>\n<entry>padding-bottom</entry>\n<entry>integer</entry>\n<entry>#gint</entry>\n<entry>padding-bottom: 5;</entry>\n</row>\n<row>\n<entry>padding-right</entry>\n<entry>integer</entry>\n<entry>#gint</entry>\n<entry>padding-right: 5;</entry>\n</row>\n<row>\n<entry>padding</entry>\n</row>\n<row>\n<entry>background-image</entry>\n<entry><literallayout>gradient (see above) or\nurl(@path)</literallayout></entry>\n<entry>#cairo_pattern_t</entry>\n<entry><literallayout>-gtk-gradient (linear,\nleft top, right top,\nfrom (&num;fff), to (&num;000));\n-gtk-gradient (linear, 0.0 0.5, 0.5 1.0,\nfrom (&num;fff),\ncolor-stop (0.5, &num;f00),\nto (&num;000));\n-gtk-gradient (radial,\ncenter center, 0.2,\ncenter center, 0.8,\ncolor-stop (0.0, &num;fff),\ncolor-stop (1.0, &num;000));\nurl ('background.png');</literallayout>\n</entry>\n</row>\n<row>\n<entry>background-repeat</entry>\n<entry>[repeat|no-repeat]</entry>\n<entry>internal</entry>\n<entry><literallayout>background-repeat: no-repeat;</literallayout>\nIf not specified, the style doesn't respect the CSS3\nspecification, since the background will be\nstretched to fill the area.\n</entry>\n</row>\n<row>\n<entry>border-top-width</entry>\n<entry>integer</entry>\n<entry>#gint</entry>\n<entry>border-top-width: 5;</entry>\n</row>\n<row>\n<entry>border-left-width</entry>\n<entry>integer</entry>\n<entry>#gint</entry>\n<entry>border-left-width: 5;</entry>\n</row>\n<row>\n<entry>border-bottom-width</entry>\n<entry>integer</entry>\n<entry>#gint</entry>\n<entry>border-bottom-width: 5;</entry>\n</row>\n<row>\n<entry>border-right-width</entry>\n<entry>integer</entry>\n<entry>#gint</entry>\n<entry>border-right-width: 5;</entry>\n</row>\n<row>\n<entry>border-width</entry>\n<entry morerows=\"1\">#GtkBorder</entry>\n<entry morerows=\"1\"><literallayout>border-width: 1;\nborder-width: 1 2;\nborder-width: 1 2 3;\nborder-width: 1 2 3 5;</literallayout>\n</entry>\n</row>\n<row>\n<entry>border-radius</entry>\n<entry>integer</entry>\n<entry>#gint</entry>\n<entry>border-radius: 5;</entry>\n</row>\n<row>\n<entry>border-style</entry>\n<entry>[none|solid|inset|outset]</entry>\n<entry>#GtkBorderStyle</entry>\n<entry>border-style: solid;</entry>\n</row>\n<row>\n<entry>border-image</entry>\n<entry><literallayout>border image (see above)</literallayout></entry>\n<entry>internal use only</entry>\n<entry><literallayout>border-image: url(\"/path/to/image.png\") 3 4 3 4 stretch;\nborder-image: url(\"/path/to/image.png\") 3 4 4 3 repeat stretch;</literallayout>\n</entry>\n</row>\n<row>\n<entry>text-shadow</entry>\n<entry>shadow list (see above)</entry>\n<entry>#GtkTextShadow</entry>\n<entry><literallayout>text-shadow: 1 1 0 blue, -4 -4 red;</literallayout></entry>\n</row>\n<row>\n<entry>transition</entry>\n<entry>transition (see above)</entry>\n<entry>internal use only</entry>\n<entry><literallayout>transition: 150ms ease-in-out;\ntransition: 1s linear loop;</literallayout>\n</entry>\n</row>\n<row>\n<entry>gtk-key-bindings</entry>\n<entry>binding set name list</entry>\n<entry>internal use only</entry>\n<entry><literallayout>gtk-bindings: binding1, binding2, ...;</literallayout>\n</entry>\n</row>\n</tbody>\n</tgroup>\n</informaltable>\n<para>\nGtkThemingEngines can register their own, engine-specific style properties\nwith the function gtk_theming_engine_register_property(). These properties\ncan be set in CSS like other properties, using a name of the form\n<literallayout>-<replaceable>namespace</replaceable>-<replaceable>name</replaceable></literallayout>, where <replaceable>namespace</replaceable> is typically\nthe name of the theming engine, and <replaceable>name</replaceable> is the\nname of the property. Style properties that have been registered by widgets\nusing gtk_widget_class_install_style_property() can also be set in this\nway, using the widget class name for <replaceable>namespace</replaceable>.\n</para>\n<example>\n<title>Using engine-specific style properties</title>\n<programlisting>\n* {\nengine: clearlooks;\nborder-radius: 4;\n-GtkPaned-handle-size: 6;\n-clearlooks-colorize-scrollbar: false;\n}\n</programlisting>\n</example>\n</refsect2>"
}