{
    "isAbstract": false, 
    "leaf": true, 
    "name": "Image", 
    "text": "Image", 
    "interfaces": [
        [
            "Atk.ImplementorIface"
        ], 
        [
            "Buildable"
        ]
    ], 
    "parents": [
        "Image", 
        "Misc", 
        "Widget", 
        "GObject.InitiallyUnowned"
    ], 
    "members": {
        "signals": [], 
        "methods": [
            {
                "name": "Gtk.Image()", 
                "parameters": null, 
                "isConstructor": true, 
                "returns": {
                    "doc": "a newly created #GtkImage widget.", 
                    "name": "ref:Gtk.Widget"
                }, 
                "version": null, 
                "description": "Creates a new empty #GtkImage widget."
            }, 
            {
                "name": "Gtk.Image(GdkPixbuf.PixbufAnimation animation)", 
                "parameters": [
                    {
                        "type": "GdkPixbuf.PixbufAnimation", 
                        "name": "animation"
                    }
                ], 
                "isConstructor": true, 
                "returns": {
                    "doc": "a new #GtkImage widget", 
                    "name": "ref:Gtk.Widget"
                }, 
                "version": null, 
                "description": "Creates a #GtkImage displaying the given animation.\nThe #GtkImage does not assume a reference to the\nanimation; you still need to unref it if you own references.\n#GtkImage will add its own reference rather than adopting yours.\n\nNote that the animation frames are shown using a timeout with\n#G_PRIORITY_DEFAULT. When using animations to indicate busyness,\nkeep in mind that the animation will only be shown if the main loop\nis not busy with something that has a higher priority."
            }, 
            {
                "name": "Gtk.Image(String filename)", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "filename"
                    }
                ], 
                "isConstructor": true, 
                "returns": {
                    "doc": "a new #GtkImage", 
                    "name": "ref:Gtk.Widget"
                }, 
                "version": null, 
                "description": "Creates a new #GtkImage displaying the file @filename. If the file\nisn't found or can't be loaded, the resulting #GtkImage will\ndisplay a \"broken image\" icon. This function never returns %NULL,\nit always returns a valid #GtkImage widget.\n\nIf the file contains an animation, the image will contain an\nanimation.\n\nIf you need to detect failures to load the file, use\ngdk_pixbuf_new_from_file() to load the file yourself, then create\nthe #GtkImage from the pixbuf. (Or for animations, use\ngdk_pixbuf_animation_new_from_file()).\n\nThe storage type (gtk_image_get_storage_type()) of the returned\nimage is not defined, it will be whatever is appropriate for\ndisplaying the file."
            }, 
            {
                "name": "Gtk.Image(Gio.Icon icon, Gtk.IconSize size)", 
                "parameters": [
                    {
                        "type": "Gio.Icon", 
                        "name": "icon"
                    }, 
                    {
                        "type": "ref:Gtk.IconSize", 
                        "name": "size"
                    }
                ], 
                "isConstructor": true, 
                "returns": {
                    "doc": "a new #GtkImage displaying the themed icon", 
                    "name": "ref:Gtk.Widget"
                }, 
                "version": "2.14", 
                "description": "Creates a #GtkImage displaying an icon from the current icon theme.\nIf the icon name isn't known, a \"broken image\" icon will be\ndisplayed instead.  If the current icon theme is changed, the icon\nwill be updated appropriately."
            }, 
            {
                "name": "Gtk.Image(String icon_name, Gtk.IconSize size)", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "icon_name"
                    }, 
                    {
                        "type": "ref:Gtk.IconSize", 
                        "name": "size"
                    }
                ], 
                "isConstructor": true, 
                "returns": {
                    "doc": "a new #GtkImage displaying the themed icon", 
                    "name": "ref:Gtk.Widget"
                }, 
                "version": "2.6", 
                "description": "Creates a #GtkImage displaying an icon from the current icon theme.\nIf the icon name isn't known, a \"broken image\" icon will be\ndisplayed instead.  If the current icon theme is changed, the icon\nwill be updated appropriately."
            }, 
            {
                "name": "Gtk.Image(Gtk.IconSet icon_set, Gtk.IconSize size)", 
                "parameters": [
                    {
                        "type": "ref:Gtk.IconSet", 
                        "name": "icon_set"
                    }, 
                    {
                        "type": "ref:Gtk.IconSize", 
                        "name": "size"
                    }
                ], 
                "isConstructor": true, 
                "returns": {
                    "doc": "a new #GtkImage", 
                    "name": "ref:Gtk.Widget"
                }, 
                "version": null, 
                "description": "Creates a #GtkImage displaying an icon set. Sample stock sizes are\n#GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_SMALL_TOOLBAR. Instead of using\nthis function, usually it's better to create a #GtkIconFactory, put\nyour icon sets in the icon factory, add the icon factory to the\nlist of default factories with gtk_icon_factory_add_default(), and\nthen use gtk_image_new_from_stock(). This will allow themes to\noverride the icon you ship with your application.\n\nThe #GtkImage does not assume a reference to the\nicon set; you still need to unref it if you own references.\n#GtkImage will add its own reference rather than adopting yours."
            }, 
            {
                "name": "Gtk.Image(GdkPixbuf.Pixbuf pixbuf)", 
                "parameters": [
                    {
                        "type": "GdkPixbuf.Pixbuf", 
                        "name": "pixbuf"
                    }
                ], 
                "isConstructor": true, 
                "returns": {
                    "doc": "a new #GtkImage", 
                    "name": "ref:Gtk.Widget"
                }, 
                "version": null, 
                "description": "Creates a new #GtkImage displaying @pixbuf.\nThe #GtkImage does not assume a reference to the\npixbuf; you still need to unref it if you own references.\n#GtkImage will add its own reference rather than adopting yours.\n\nNote that this function just creates an #GtkImage from the pixbuf. The\n#GtkImage created will not react to state changes. Should you want that, \nyou should use gtk_image_new_from_icon_set()."
            }, 
            {
                "name": "Gtk.Image(String resource_path)", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "resource_path"
                    }
                ], 
                "isConstructor": true, 
                "returns": {
                    "doc": "a new #GtkImage", 
                    "name": "ref:Gtk.Widget"
                }, 
                "version": "3.4", 
                "description": "Creates a new #GtkImage displaying the resource file @resource_path. If the file\nisn't found or can't be loaded, the resulting #GtkImage will\ndisplay a \"broken image\" icon. This function never returns %NULL,\nit always returns a valid #GtkImage widget.\n\nIf the file contains an animation, the image will contain an\nanimation.\n\nIf you need to detect failures to load the file, use\ngdk_pixbuf_new_from_file() to load the file yourself, then create\nthe #GtkImage from the pixbuf. (Or for animations, use\ngdk_pixbuf_animation_new_from_file()).\n\nThe storage type (gtk_image_get_storage_type()) of the returned\nimage is not defined, it will be whatever is appropriate for\ndisplaying the file."
            }, 
            {
                "name": "Gtk.Image(String stock_id, Gtk.IconSize size)", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "stock_id"
                    }, 
                    {
                        "type": "ref:Gtk.IconSize", 
                        "name": "size"
                    }
                ], 
                "isConstructor": true, 
                "returns": {
                    "doc": "a new #GtkImage displaying the stock icon", 
                    "name": "ref:Gtk.Widget"
                }, 
                "version": null, 
                "description": "Creates a #GtkImage displaying a stock icon. Sample stock icon\nnames are #GTK_STOCK_OPEN, #GTK_STOCK_QUIT. Sample stock sizes\nare #GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_SMALL_TOOLBAR. If the stock\nicon name isn't known, the image will be empty.\nYou can register your own stock icon names, see\ngtk_icon_factory_add_default() and gtk_icon_factory_add()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.8", 
                "name": "clear", 
                "parameters": null, 
                "description": "Resets the image to be empty."
            }, 
            {
                "returns": {
                    "type": "GdkPixbuf.PixbufAnimation", 
                    "description": "the displayed animation, or %NULL if"
                }, 
                "version": "", 
                "name": "get_animation", 
                "parameters": null, 
                "description": "Gets the #GdkPixbufAnimation being displayed by the #GtkImage.\nThe storage type of the image must be %GTK_IMAGE_EMPTY or\n%GTK_IMAGE_ANIMATION (see gtk_image_get_storage_type()).\nThe caller of this function does not own a reference to the\nreturned animation.\n\nthe image is empty"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.14", 
                "name": "get_gicon", 
                "parameters": [
                    {
                        "type": "Gio.Icon", 
                        "name": "gicon", 
                        "description": "place to store a #GIcon, or %NULL"
                    }, 
                    {
                        "type": "ref:Gtk.IconSize", 
                        "name": "size", 
                        "description": "place to store an icon size, or %NULL"
                    }
                ], 
                "description": "Gets the #GIcon and size being displayed by the #GtkImage.\nThe storage type of the image must be %GTK_IMAGE_EMPTY or\n%GTK_IMAGE_GICON (see gtk_image_get_storage_type()).\nThe caller of this function does not own a reference to the\nreturned #GIcon."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.6", 
                "name": "get_icon_name", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "icon_name", 
                        "description": "place to store an icon name, or %NULL"
                    }, 
                    {
                        "type": "ref:Gtk.IconSize", 
                        "name": "size", 
                        "description": "place to store an icon size, or %NULL"
                    }
                ], 
                "description": "Gets the icon name and size being displayed by the #GtkImage.\nThe storage type of the image must be %GTK_IMAGE_EMPTY or\n%GTK_IMAGE_ICON_NAME (see gtk_image_get_storage_type()).\nThe returned string is owned by the #GtkImage and should not\nbe freed."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "get_icon_set", 
                "parameters": [
                    {
                        "type": "ref:Gtk.IconSet", 
                        "name": "icon_set", 
                        "description": "location to store a #GtkIconSet, or %NULL"
                    }, 
                    {
                        "type": "ref:Gtk.IconSize", 
                        "name": "size", 
                        "description": "location to store a stock icon size, or %NULL"
                    }
                ], 
                "description": "Gets the icon set and size being displayed by the #GtkImage.\nThe storage type of the image must be %GTK_IMAGE_EMPTY or\n%GTK_IMAGE_ICON_SET (see gtk_image_get_storage_type())."
            }, 
            {
                "returns": {
                    "type": "GdkPixbuf.Pixbuf", 
                    "description": "the displayed pixbuf, or %NULL if"
                }, 
                "version": "", 
                "name": "get_pixbuf", 
                "parameters": null, 
                "description": "Gets the #GdkPixbuf being displayed by the #GtkImage.\nThe storage type of the image must be %GTK_IMAGE_EMPTY or\n%GTK_IMAGE_PIXBUF (see gtk_image_get_storage_type()).\nThe caller of this function does not own a reference to the\nreturned pixbuf.\n\nthe image is empty"
            }, 
            {
                "returns": {
                    "type": "Integer", 
                    "description": "the pixel size used for named icons."
                }, 
                "version": "2.6", 
                "name": "get_pixel_size", 
                "parameters": null, 
                "description": "Gets the pixel size used for named icons."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "get_stock", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "stock_id", 
                        "description": "place to store a stock icon name, or %NULL"
                    }, 
                    {
                        "type": "ref:Gtk.IconSize", 
                        "name": "size", 
                        "description": "place to store a stock icon size, or %NULL"
                    }
                ], 
                "description": "Gets the stock icon name and size being displayed by the #GtkImage.\nThe storage type of the image must be %GTK_IMAGE_EMPTY or\n%GTK_IMAGE_STOCK (see gtk_image_get_storage_type()).\nThe returned string is owned by the #GtkImage and should not\nbe freed."
            }, 
            {
                "returns": {
                    "type": "ref:Gtk.ImageType", 
                    "description": "image representation being used"
                }, 
                "version": "", 
                "name": "get_storage_type", 
                "parameters": null, 
                "description": "Gets the type of representation being used by the #GtkImage\nto store image data. If the #GtkImage has no image data,\nthe return value will be %GTK_IMAGE_EMPTY."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_from_animation", 
                "parameters": [
                    {
                        "type": "GdkPixbuf.PixbufAnimation", 
                        "name": "animation", 
                        "description": "the #GdkPixbufAnimation"
                    }
                ], 
                "description": "Causes the #GtkImage to display the given animation (or display\nnothing, if you set the animation to %NULL)."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_from_file", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "filename", 
                        "description": "a filename or %NULL"
                    }
                ], 
                "description": "See gtk_image_new_from_file() for details."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.14", 
                "name": "set_from_gicon", 
                "parameters": [
                    {
                        "type": "Gio.Icon", 
                        "name": "icon", 
                        "description": "an icon"
                    }, 
                    {
                        "type": "ref:Gtk.IconSize", 
                        "name": "size", 
                        "description": "an icon size"
                    }
                ], 
                "description": "See gtk_image_new_from_gicon() for details."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.6", 
                "name": "set_from_icon_name", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "icon_name", 
                        "description": "an icon name"
                    }, 
                    {
                        "type": "ref:Gtk.IconSize", 
                        "name": "size", 
                        "description": "an icon size"
                    }
                ], 
                "description": "See gtk_image_new_from_icon_name() for details."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_from_icon_set", 
                "parameters": [
                    {
                        "type": "ref:Gtk.IconSet", 
                        "name": "icon_set", 
                        "description": "a #GtkIconSet"
                    }, 
                    {
                        "type": "ref:Gtk.IconSize", 
                        "name": "size", 
                        "description": "a stock icon size"
                    }
                ], 
                "description": "See gtk_image_new_from_icon_set() for details."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_from_pixbuf", 
                "parameters": [
                    {
                        "type": "GdkPixbuf.Pixbuf", 
                        "name": "pixbuf", 
                        "description": "a #GdkPixbuf or %NULL"
                    }
                ], 
                "description": "See gtk_image_new_from_pixbuf() for details."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_from_resource", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "resource_path", 
                        "description": "a resource path or %NULL"
                    }
                ], 
                "description": "See gtk_image_new_from_resource() for details."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_from_stock", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "stock_id", 
                        "description": "a stock icon name"
                    }, 
                    {
                        "type": "ref:Gtk.IconSize", 
                        "name": "size", 
                        "description": "a stock icon size"
                    }
                ], 
                "description": "See gtk_image_new_from_stock() for details."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.6", 
                "name": "set_pixel_size", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "pixel_size", 
                        "description": "the new pixel size"
                    }
                ], 
                "description": "Sets the pixel size to use for named icons. If the pixel size is set\nto a value != -1, it is used instead of the icon size set by\ngtk_image_set_from_icon_name()."
            }
        ], 
        "properties": [
            {
                "writable": false, 
                "type": "String", 
                "readable": false, 
                "name": "file", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "Gio.Icon", 
                "readable": false, 
                "name": "gicon", 
                "description": "The GIcon displayed in the GtkImage. For themed icons,\nIf the icon theme is changed, the image will be updated\nautomatically."
            }, 
            {
                "writable": false, 
                "type": "String", 
                "readable": false, 
                "name": "icon-name", 
                "description": "The name of the icon in the icon theme. If the icon theme is\nchanged, the image will be updated automatically."
            }, 
            {
                "writable": false, 
                "type": "Gtk.IconSet", 
                "readable": false, 
                "name": "icon-set", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "Integer", 
                "readable": false, 
                "name": "icon-size", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "GdkPixbuf.Pixbuf", 
                "readable": false, 
                "name": "pixbuf", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "GdkPixbuf.PixbufAnimation", 
                "readable": false, 
                "name": "pixbuf-animation", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "Integer", 
                "readable": false, 
                "name": "pixel-size", 
                "description": "The \"pixel-size\" property can be used to specify a fixed size\noverriding the #GtkImage:icon-size property for images of type \n%GTK_IMAGE_ICON_NAME."
            }, 
            {
                "writable": false, 
                "type": "String", 
                "readable": false, 
                "name": "stock", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "Gtk.ImageType", 
                "readable": false, 
                "name": "storage-type", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "Boolean", 
                "readable": false, 
                "name": "use-fallback", 
                "description": "Whether the icon displayed in the GtkImage will use\nstandard icon names fallback. The value of this property\nis only relevant for images of type %GTK_IMAGE_ICON_NAME\nand %GTK_IMAGE_GICON."
            }
        ]
    }, 
    "fullname": "Class Gtk.Image", 
    "id": "Docs-Image", 
    "description": "The #GtkImage widget displays an image. Various kinds of object\ncan be displayed as an image; most typically, you would load a\n#GdkPixbuf (\"pixel buffer\") from a file, and then display that.\nThere's a convenience function to do this, gtk_image_new_from_file(),\nused as follows:\n<informalexample><programlisting>\nGtkWidget *image;\nimage = gtk_image_new_from_file (\"myfile.png\");\n</programlisting></informalexample>\nIf the file isn't loaded successfully, the image will contain a\n\"broken image\" icon similar to that used in many web browsers.\nIf you want to handle errors in loading the file yourself,\nfor example by displaying an error message, then load the image with\ngdk_pixbuf_new_from_file(), then create the #GtkImage with\ngtk_image_new_from_pixbuf().\n\nThe image file may contain an animation, if so the #GtkImage will\ndisplay an animation (#GdkPixbufAnimation) instead of a static image.\n\n#GtkImage is a subclass of #GtkMisc, which implies that you can\nalign it (center, left, right) and add padding to it, using\n#GtkMisc methods.\n\n#GtkImage is a \"no window\" widget (has no #GdkWindow of its own),\nso by default does not receive events. If you want to receive events\non the image, such as button clicks, place the image inside a\n#GtkEventBox, then connect to the event signals on the event box.\n<example>\n<title>Handling button press events on a\n<structname>GtkImage</structname>.</title>\n<programlisting>\nstatic gboolean\nbutton_press_callback (GtkWidget      *event_box,\nGdkEventButton *event,\ngpointer        data)\n{\ng_print (\"Event box clicked at coordinates &percnt;f,&percnt;f\\n\",\nevent->x, event->y);\n\n/<!---->* Returning TRUE means we handled the event, so the signal\n* emission should be stopped (don't call any further\n* callbacks that may be connected). Return FALSE\n* to continue invoking callbacks.\n*<!---->/\nreturn TRUE;\n}\n\nstatic GtkWidget*\ncreate_image (void)\n{\nGtkWidget *image;\nGtkWidget *event_box;\n\nimage = gtk_image_new_from_file (\"myfile.png\");\n\nevent_box = gtk_event_box_new (<!-- -->);\n\ngtk_container_add (GTK_CONTAINER (event_box), image);\n\ng_signal_connect (G_OBJECT (event_box),\n\"button_press_event\",\nG_CALLBACK (button_press_callback),\nimage);\n\nreturn image;\n}\n</programlisting>\n</example>\n\nWhen handling events on the event box, keep in mind that coordinates\nin the image may be different from event box coordinates due to\nthe alignment and padding settings on the image (see #GtkMisc).\nThe simplest way to solve this is to set the alignment to 0.0\n(left/top), and set the padding to zero. Then the origin of\nthe image will be the same as the origin of the event box.\n\nSometimes an application will want to avoid depending on external data\nfiles, such as image files. GTK+ comes with a program to avoid this,\ncalled <application>gdk-pixbuf-csource</application>. This library\nallows you to convert an image into a C variable declaration, which\ncan then be loaded into a #GdkPixbuf using\ngdk_pixbuf_new_from_inline()."
}