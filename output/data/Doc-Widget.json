{
    "isAbstract": true, 
    "leaf": true, 
    "name": "Widget", 
    "text": "Widget", 
    "interfaces": [
        [
            "Atk.ImplementorIface"
        ], 
        [
            "Buildable"
        ]
    ], 
    "parents": [
        "Widget", 
        "GObject.InitiallyUnowned"
    ], 
    "members": {
        "signals": [
            {
                "version": "", 
                "when": null, 
                "name": "accel-closures-changed", 
                "description": ""
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "button-press-event", 
                "description": "The ::button-press-event signal will be emitted when a button\n(typically from a mouse) is pressed.\n\nTo receive this signal, the #GdkWindow associated to the\nwidget needs to enable the #GDK_BUTTON_PRESS_MASK mask.\n\nThis signal will be sent to the grab widget if there is one.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "button-release-event", 
                "description": "The ::button-release-event signal will be emitted when a button\n(typically from a mouse) is released.\n\nTo receive this signal, the #GdkWindow associated to the\nwidget needs to enable the #GDK_BUTTON_RELEASE_MASK mask.\n\nThis signal will be sent to the grab widget if there is one.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "can-activate-accel", 
                "description": "Determines whether an accelerator that activates the signal\nidentified by @signal_id can currently be activated.\nThis signal is present to allow applications and derived\nwidgets to override the default #GtkWidget handling\nfor determining whether an accelerator can be activated."
            }, 
            {
                "version": "", 
                "when": "first", 
                "name": "child-notify", 
                "description": "The ::child-notify signal is emitted for each\n<link linkend=\"child-properties\">child property</link>  that has\nchanged on an object. The signal's detail holds the property name."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "composited-changed", 
                "description": "The ::composited-changed signal is emitted when the composited\nstatus of @widget<!-- -->s screen changes.\nSee gdk_screen_is_composited()."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "configure-event", 
                "description": "The ::configure-event signal will be emitted when the size, position or\nstacking of the @widget's window has changed.\n\nTo receive this signal, the #GdkWindow associated to the widget needs\nto enable the #GDK_STRUCTURE_MASK mask. GDK will enable this mask\nautomatically for all new windows.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "2.14", 
                "when": "last", 
                "name": "damage-event", 
                "description": "Emitted when a redirected window belonging to @widget gets drawn into.\nThe region/area members of the event shows what area of the redirected\ndrawable was drawn into.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "delete-event", 
                "description": "The ::delete-event signal is emitted if a user requests that\na toplevel window is closed. The default handler for this signal\ndestroys the window. Connecting gtk_widget_hide_on_delete() to\nthis signal will cause the window to be hidden instead, so that\nit can later be shown again without reconstructing it.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "", 
                "when": "cleanup", 
                "name": "destroy", 
                "description": "Signals that all holders of a reference to the widget should release\nthe reference that they hold. May result in finalization of the widget\nif all references are released."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "destroy-event", 
                "description": "The ::destroy-event signal is emitted when a #GdkWindow is destroyed.\nYou rarely get this signal, because most widgets disconnect themselves\nfrom their window before they destroy it, so no widget owns the\nwindow at destroy time.\n\nTo receive this signal, the #GdkWindow associated to the widget needs\nto enable the #GDK_STRUCTURE_MASK mask. GDK will enable this mask\nautomatically for all new windows.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "", 
                "when": "first", 
                "name": "direction-changed", 
                "description": "The ::direction-changed signal is emitted when the text direction\nof a widget changes."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "drag-begin", 
                "description": "The ::drag-begin signal is emitted on the drag source when a drag is\nstarted. A typical reason to connect to this signal is to set up a\ncustom drag icon with gtk_drag_source_set_icon().\n\nNote that some widgets set up a drag icon in the default handler of\nthis signal, so you may have to use g_signal_connect_after() to\noverride what the default handler did."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "drag-data-delete", 
                "description": "The ::drag-data-delete signal is emitted on the drag source when a drag\nwith the action %GDK_ACTION_MOVE is successfully completed. The signal\nhandler is responsible for deleting the data that has been dropped. What\n\"delete\" means depends on the context of the drag operation."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "drag-data-get", 
                "description": "The ::drag-data-get signal is emitted on the drag source when the drop\nsite requests the data which is dragged. It is the responsibility of\nthe signal handler to fill @data with the data in the format which\nis indicated by @info. See gtk_selection_data_set() and\ngtk_selection_data_set_text()."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "drag-data-received", 
                "description": "The ::drag-data-received signal is emitted on the drop site when the\ndragged data has been received. If the data was received in order to\ndetermine whether the drop will be accepted, the handler is expected\nto call gdk_drag_status() and <emphasis>not</emphasis> finish the drag.\nIf the data was received in response to a #GtkWidget::drag-drop signal\n(and this is the last target to be received), the handler for this\nsignal is expected to process the received data and then call\ngtk_drag_finish(), setting the @success parameter depending on whether\nthe data was processed successfully.\n\nThe handler may inspect and modify @drag_context->action before calling\ngtk_drag_finish(), e.g. to implement %GDK_ACTION_ASK as shown in the\nfollowing example:\n|[\nvoid\ndrag_data_received (GtkWidget          *widget,\nGdkDragContext     *drag_context,\ngint                x,\ngint                y,\nGtkSelectionData   *data,\nguint               info,\nguint               time)\n{\nif ((data->length >= 0) && (data->format == 8))\n{\nif (drag_context->action == GDK_ACTION_ASK)\n{\nGtkWidget *dialog;\ngint response;\n\ndialog = gtk_message_dialog_new (NULL,\nGTK_DIALOG_MODAL |\nGTK_DIALOG_DESTROY_WITH_PARENT,\nGTK_MESSAGE_INFO,\nGTK_BUTTONS_YES_NO,\n\"Move the data ?\\n\");\nresponse = gtk_dialog_run (GTK_DIALOG (dialog));\ngtk_widget_destroy (dialog);\n\nif (response == GTK_RESPONSE_YES)\ndrag_context->action = GDK_ACTION_MOVE;\nelse\ndrag_context->action = GDK_ACTION_COPY;\n}\n\ngtk_drag_finish (drag_context, TRUE, FALSE, time);\nreturn;\n}\n\ngtk_drag_finish (drag_context, FALSE, FALSE, time);\n}\n]|"
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "drag-drop", 
                "description": "The ::drag-drop signal is emitted on the drop site when the user drops\nthe data onto the widget. The signal handler must determine whether\nthe cursor position is in a drop zone or not. If it is not in a drop\nzone, it returns %FALSE and no further processing is necessary.\nOtherwise, the handler returns %TRUE. In this case, the handler must\nensure that gtk_drag_finish() is called to let the source know that\nthe drop is done. The call to gtk_drag_finish() can be done either\ndirectly or in a #GtkWidget::drag-data-received handler which gets\ntriggered by calling gtk_drag_get_data() to receive the data for one\nor more of the supported targets."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "drag-end", 
                "description": "The ::drag-end signal is emitted on the drag source when a drag is\nfinished.  A typical reason to connect to this signal is to undo\nthings done in #GtkWidget::drag-begin."
            }, 
            {
                "version": "2.12", 
                "when": "last", 
                "name": "drag-failed", 
                "description": "The ::drag-failed signal is emitted on the drag source when a drag has\nfailed. The signal handler may hook custom code to handle a failed DND\noperation based on the type of error, it returns %TRUE is the failure has\nbeen already handled (not showing the default \"drag operation failed\"\nanimation), otherwise it returns %FALSE."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "drag-leave", 
                "description": "The ::drag-leave signal is emitted on the drop site when the cursor\nleaves the widget. A typical reason to connect to this signal is to\nundo things done in #GtkWidget::drag-motion, e.g. undo highlighting\nwith gtk_drag_unhighlight()"
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "drag-motion", 
                "description": "The drag-motion signal is emitted on the drop site when the user\nmoves the cursor over the widget during a drag. The signal handler\nmust determine whether the cursor position is in a drop zone or not.\nIf it is not in a drop zone, it returns %FALSE and no further processing\nis necessary. Otherwise, the handler returns %TRUE. In this case, the\nhandler is responsible for providing the necessary information for\ndisplaying feedback to the user, by calling gdk_drag_status().\n\nIf the decision whether the drop will be accepted or rejected can't be\nmade based solely on the cursor position and the type of the data, the\nhandler may inspect the dragged data by calling gtk_drag_get_data() and\ndefer the gdk_drag_status() call to the #GtkWidget::drag-data-received\nhandler. Note that you cannot not pass #GTK_DEST_DEFAULT_DROP,\n#GTK_DEST_DEFAULT_MOTION or #GTK_DEST_DEFAULT_ALL to gtk_drag_dest_set()\nwhen using the drag-motion signal that way.\n\nAlso note that there is no drag-enter signal. The drag receiver has to\nkeep track of whether he has received any drag-motion signals since the\nlast #GtkWidget::drag-leave and if not, treat the drag-motion signal as\nan \"enter\" signal. Upon an \"enter\", the handler will typically highlight\nthe drop site with gtk_drag_highlight().\n|[\nstatic void\ndrag_motion (GtkWidget *widget,\nGdkDragContext *context,\ngint x,\ngint y,\nguint time)\n{\nGdkAtom target;\n\nPrivateData *private_data = GET_PRIVATE_DATA (widget);\n\nif (!private_data->drag_highlight)\n{\nprivate_data->drag_highlight = 1;\ngtk_drag_highlight (widget);\n}\n\ntarget = gtk_drag_dest_find_target (widget, context, NULL);\nif (target == GDK_NONE)\ngdk_drag_status (context, 0, time);\nelse\n{\nprivate_data->pending_status = context->suggested_action;\ngtk_drag_get_data (widget, context, target, time);\n}\n\nreturn TRUE;\n}\n\nstatic void\ndrag_data_received (GtkWidget        *widget,\nGdkDragContext   *context,\ngint              x,\ngint              y,\nGtkSelectionData *selection_data,\nguint             info,\nguint             time)\n{\nPrivateData *private_data = GET_PRIVATE_DATA (widget);\n\nif (private_data->suggested_action)\n{\nprivate_data->suggested_action = 0;\n\n/&ast; We are getting this data due to a request in drag_motion,\n* rather than due to a request in drag_drop, so we are just\n* supposed to call gdk_drag_status (), not actually paste in\n* the data.\n&ast;/\nstr = gtk_selection_data_get_text (selection_data);\nif (!data_is_acceptable (str))\ngdk_drag_status (context, 0, time);\nelse\ngdk_drag_status (context, private_data->suggested_action, time);\n}\nelse\n{\n/&ast; accept the drop &ast;/\n}\n}\n]|"
            }, 
            {
                "version": "3.0", 
                "when": "last", 
                "name": "draw", 
                "description": "This signal is emitted when a widget is supposed to render itself.\nThe @widget's top left corner must be painted at the origin of\nthe passed in context and be sized to the values returned by\ngtk_widget_get_allocated_width() and\ngtk_widget_get_allocated_height().\n\nSignal handlers connected to this signal can modify the cairo\ncontext passed as @cr in any way they like and don't need to\nrestore it. The signal emission takes care of calling cairo_save()\nbefore and cairo_restore() after invoking the handler."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "enter-notify-event", 
                "description": "The ::enter-notify-event will be emitted when the pointer enters\nthe @widget's window.\n\nTo receive this signal, the #GdkWindow associated to the widget needs\nto enable the #GDK_ENTER_NOTIFY_MASK mask.\n\nThis signal will be sent to the grab widget if there is one.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "event", 
                "description": "The GTK+ main loop will emit three signals for each GDK event delivered\nto a widget: one generic ::event signal, another, more specific,\nsignal that matches the type of event delivered (e.g.\n#GtkWidget::key-press-event) and finally a generic\n#GtkWidget::event-after signal.\n\nand to cancel the emission of the second specific ::event signal.\n%FALSE to propagate the event further and to allow the emission of\nthe second signal. The ::event-after signal is emitted regardless of\nthe return value."
            }, 
            {
                "version": "", 
                "when": null, 
                "name": "event-after", 
                "description": "After the emission of the #GtkWidget::event signal and (optionally)\nthe second more specific signal, ::event-after will be emitted\nregardless of the previous two signals handlers return values."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "focus", 
                "description": ""
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "focus-in-event", 
                "description": "The ::focus-in-event signal will be emitted when the keyboard focus\nenters the @widget's window.\n\nTo receive this signal, the #GdkWindow associated to the widget needs\nto enable the #GDK_FOCUS_CHANGE_MASK mask.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "focus-out-event", 
                "description": "The ::focus-out-event signal will be emitted when the keyboard focus\nleaves the @widget's window.\n\nTo receive this signal, the #GdkWindow associated to the widget needs\nto enable the #GDK_FOCUS_CHANGE_MASK mask.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "2.8", 
                "when": "last", 
                "name": "grab-broken-event", 
                "description": "Emitted when a pointer or keyboard grab on a window belonging\nto @widget gets broken.\n\nOn X11, this happens when the grab window becomes unviewable\n(i.e. it or one of its ancestors is unmapped), or if the same\napplication grabs the pointer or keyboard again.\n\nthe event. %FALSE to propagate the event further."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "grab-focus", 
                "description": ""
            }, 
            {
                "version": "", 
                "when": "first", 
                "name": "grab-notify", 
                "description": "The ::grab-notify signal is emitted when a widget becomes\nshadowed by a GTK+ grab (not a pointer or keyboard grab) on\nanother widget, or when it becomes unshadowed due to a grab\nbeing removed.\n\nA widget is shadowed by a gtk_grab_add() when the topmost\ngrab widget in the grab stack of its window group is not\nits ancestor."
            }, 
            {
                "version": "", 
                "when": "first", 
                "name": "hide", 
                "description": ""
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "hierarchy-changed", 
                "description": "The ::hierarchy-changed signal is emitted when the\nanchored state of a widget changes. A widget is\n<firstterm>anchored</firstterm> when its toplevel\nancestor is a #GtkWindow. This signal is emitted when\na widget changes from un-anchored to anchored or vice-versa."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "key-press-event", 
                "description": "The ::key-press-event signal is emitted when a key is pressed. The signal\nemission will reoccur at the key-repeat rate when the key is kept pressed.\n\nTo receive this signal, the #GdkWindow associated to the widget needs\nto enable the #GDK_KEY_PRESS_MASK mask.\n\nThis signal will be sent to the grab widget if there is one.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "key-release-event", 
                "description": "The ::key-release-event signal is emitted when a key is released.\n\nTo receive this signal, the #GdkWindow associated to the widget needs\nto enable the #GDK_KEY_RELEASE_MASK mask.\n\nThis signal will be sent to the grab widget if there is one.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "2.12", 
                "when": "last", 
                "name": "keynav-failed", 
                "description": "Gets emitted if keyboard navigation fails.\nSee gtk_widget_keynav_failed() for details.\n\nif the emitting widget should try to handle the keyboard\nnavigation attempt in its parent container(s)."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "leave-notify-event", 
                "description": "The ::leave-notify-event will be emitted when the pointer leaves\nthe @widget's window.\n\nTo receive this signal, the #GdkWindow associated to the widget needs\nto enable the #GDK_LEAVE_NOTIFY_MASK mask.\n\nThis signal will be sent to the grab widget if there is one.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "", 
                "when": "first", 
                "name": "map", 
                "description": ""
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "map-event", 
                "description": "The ::map-event signal will be emitted when the @widget's window is\nmapped. A window is mapped when it becomes visible on the screen.\n\nTo receive this signal, the #GdkWindow associated to the widget needs\nto enable the #GDK_STRUCTURE_MASK mask. GDK will enable this mask\nautomatically for all new windows.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "mnemonic-activate", 
                "description": ""
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "motion-notify-event", 
                "description": "The ::motion-notify-event signal is emitted when the pointer moves\nover the widget's #GdkWindow.\n\nTo receive this signal, the #GdkWindow associated to the widget\nneeds to enable the #GDK_POINTER_MOTION_MASK mask.\n\nThis signal will be sent to the grab widget if there is one.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "move-focus", 
                "description": ""
            }, 
            {
                "version": "", 
                "when": "first", 
                "name": "parent-set", 
                "description": "The ::parent-set signal is emitted when a new parent\nhas been set on a widget."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "popup-menu", 
                "description": "This signal gets emitted whenever a widget should pop up a context\nmenu. This usually happens through the standard key binding mechanism;\nby pressing a certain key while a widget is focused, the user can cause\nthe widget to pop up a menu.  For example, the #GtkEntry widget creates\na menu with clipboard commands. See <xref linkend=\"checklist-popup-menu\"/>\nfor an example of how to use this signal."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "property-notify-event", 
                "description": "The ::property-notify-event signal will be emitted when a property on\nthe @widget's window has been changed or deleted.\n\nTo receive this signal, the #GdkWindow associated to the widget needs\nto enable the #GDK_PROPERTY_CHANGE_MASK mask.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "proximity-in-event", 
                "description": "To receive this signal the #GdkWindow associated to the widget needs\nto enable the #GDK_PROXIMITY_IN_MASK mask.\n\nThis signal will be sent to the grab widget if there is one.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "proximity-out-event", 
                "description": "To receive this signal the #GdkWindow associated to the widget needs\nto enable the #GDK_PROXIMITY_OUT_MASK mask.\n\nThis signal will be sent to the grab widget if there is one.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "2.12", 
                "when": "last", 
                "name": "query-tooltip", 
                "description": "Emitted when #GtkWidget:has-tooltip is %TRUE and the #GtkSettings:gtk-tooltip-timeout\nhas expired with the cursor hovering \"above\" @widget; or emitted when @widget got\nfocus in keyboard mode.\n\nUsing the given coordinates, the signal handler should determine\nwhether a tooltip should be shown for @widget. If this is the case\n%TRUE should be returned, %FALSE otherwise.  Note that if\n@keyboard_mode is %TRUE, the values of @x and @y are undefined and\nshould not be used.\n\nThe signal handler is free to manipulate @tooltip with the therefore\ndestined function calls."
            }, 
            {
                "version": "", 
                "when": "first", 
                "name": "realize", 
                "description": ""
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "screen-changed", 
                "description": "The ::screen-changed signal gets emitted when the\nscreen of a widget has changed."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "scroll-event", 
                "description": "The ::scroll-event signal is emitted when a button in the 4 to 7\nrange is pressed. Wheel mice are usually configured to generate\nbutton press events for buttons 4 and 5 when the wheel is turned.\n\nTo receive this signal, the #GdkWindow associated to the widget needs\nto enable the #GDK_BUTTON_PRESS_MASK mask.\n\nThis signal will be sent to the grab widget if there is one.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "selection-clear-event", 
                "description": "The ::selection-clear-event signal will be emitted when the\nthe @widget's window has lost ownership of a selection.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "selection-get", 
                "description": ""
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "selection-notify-event", 
                "description": ""
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "selection-received", 
                "description": ""
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "selection-request-event", 
                "description": "The ::selection-request-event signal will be emitted when\nanother client requests ownership of the selection owned by\nthe @widget's window.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "", 
                "when": "first", 
                "name": "show", 
                "description": ""
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "show-help", 
                "description": ""
            }, 
            {
                "version": "", 
                "when": "first", 
                "name": "size-allocate", 
                "description": ""
            }, 
            {
                "version": "", 
                "when": "first", 
                "name": "state-changed", 
                "description": "The ::state-changed signal is emitted when the widget state changes.\nSee gtk_widget_get_state()."
            }, 
            {
                "version": "3.0", 
                "when": "first", 
                "name": "state-flags-changed", 
                "description": "The ::state-flags-changed signal is emitted when the widget state\nchanges, see gtk_widget_get_state_flags()."
            }, 
            {
                "version": "", 
                "when": "first", 
                "name": "style-set", 
                "description": "The ::style-set signal is emitted when a new style has been set\non a widget. Note that style-modifying functions like\ngtk_widget_modify_base() also cause this signal to be emitted.\n\nNote that this signal is emitted for changes to the deprecated\n#GtkStyle. To track changes to the #GtkStyleContext associated\nwith a widget, use the #GtkWidget::style-updated signal.\n\nDeprecated:3.0: Use the #GtkWidget::style-updated signal"
            }, 
            {
                "version": "3.0", 
                "when": "first", 
                "name": "style-updated", 
                "description": "The ::style-updated signal is emitted when the #GtkStyleContext\nof a widget is changed. Note that style-modifying functions like\ngtk_widget_override_color() also cause this signal to be emitted."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "touch-event", 
                "description": ""
            }, 
            {
                "version": "", 
                "when": "first", 
                "name": "unmap", 
                "description": ""
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "unmap-event", 
                "description": "The ::unmap-event signal will be emitted when the @widget's window is\nunmapped. A window is unmapped when it becomes invisible on the screen.\n\nTo receive this signal, the #GdkWindow associated to the widget needs\nto enable the #GDK_STRUCTURE_MASK mask. GDK will enable this mask\nautomatically for all new windows.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "unrealize", 
                "description": ""
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "visibility-notify-event", 
                "description": "The ::visibility-notify-event will be emitted when the @widget's window\nis obscured or unobscured.\n\nTo receive this signal the #GdkWindow associated to the widget needs\nto enable the #GDK_VISIBILITY_NOTIFY_MASK mask.\n\n%FALSE to propagate the event further."
            }, 
            {
                "version": "", 
                "when": "last", 
                "name": "window-state-event", 
                "description": "The ::window-state-event will be emitted when the state of the\ntoplevel window associated to the @widget changes.\n\nTo receive this signal the #GdkWindow associated to the widget\nneeds to enable the #GDK_STRUCTURE_MASK mask. GDK will enable\nthis mask automatically for all new windows.\n\nevent. %FALSE to propagate the event further."
            }
        ], 
        "methods": [
            {
                "isConstructor": true, 
                "returns": {
                    "doc": "a new #GtkWidget of type @widget_type", 
                    "name": "ref:Gtk.Widget"
                }, 
                "version": null, 
                "name": "Gtk.Widget(Integer type, String first_property_name, VarArg None)", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "type"
                    }, 
                    {
                        "type": "String", 
                        "name": "first_property_name"
                    }, 
                    {
                        "type": "ref:VarArg", 
                        "name": null
                    }
                ]
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the widget was activatable"
                }, 
                "version": "", 
                "name": "activate", 
                "parameters": null, 
                "description": "For widgets that can be \"activated\" (buttons, menu items, etc.)\nthis function activates them. Activation is what happens when you\npress Enter on a widget during key navigation. If @widget isn't\nactivatable, the function returns %FALSE."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "add_accelerator", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "accel_signal", 
                        "description": "widget signal to emit on accelerator activation"
                    }, 
                    {
                        "type": "ref:Gtk.AccelGroup", 
                        "name": "accel_group", 
                        "description": "accel group for this widget, added to its toplevel"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "accel_key", 
                        "description": "GDK keyval of the accelerator"
                    }, 
                    {
                        "type": "Gdk.ModifierType", 
                        "name": "accel_mods", 
                        "description": "modifier key combination of the accelerator"
                    }, 
                    {
                        "type": "ref:Gtk.AccelFlags", 
                        "name": "accel_flags", 
                        "description": "flag accelerators, e.g. %GTK_ACCEL_VISIBLE"
                    }
                ], 
                "description": "Installs an accelerator for this @widget in @accel_group that causes\n@accel_signal to be emitted if the accelerator is activated.\nThe @accel_group needs to be added to the widget's toplevel via\ngtk_window_add_accel_group(), and the signal must be of type %G_RUN_ACTION.\nAccelerators added through this function are not user changeable during\nruntime. If you want to support accelerators that can be changed by the\nuser, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or\ngtk_menu_item_set_accel_path() instead."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "add_device_events", 
                "parameters": [
                    {
                        "type": "Gdk.Device", 
                        "name": "device", 
                        "description": "a #GdkDevice"
                    }, 
                    {
                        "type": "Gdk.EventMask", 
                        "name": "events", 
                        "description": "an event mask, see #GdkEventMask"
                    }
                ], 
                "description": "Adds the device events in the bitfield @events to the event mask for\n@widget. See gtk_widget_set_device_events() for details."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "add_events", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "events", 
                        "description": "an event mask, see #GdkEventMask"
                    }
                ], 
                "description": "Adds the events in the bitfield @events to the event mask for\n@widget. See gtk_widget_set_events() for details."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.4", 
                "name": "add_mnemonic_label", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Widget", 
                        "name": "label", 
                        "description": "a #GtkWidget that acts as a mnemonic label for @widget"
                    }
                ], 
                "description": "Adds a widget to the list of mnemonic labels for\nthis widget. (See gtk_widget_list_mnemonic_labels()). Note the\nlist of mnemonic labels for the widget is cleared when the\nwidget is destroyed, so the caller must make sure to update\nits internal state at this point as well, by using a connection\nto the #GtkWidget::destroy signal or a weak notifier."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the accelerator can be activated."
                }, 
                "version": "2.4", 
                "name": "can_activate_accel", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "signal_id", 
                        "description": "the ID of a signal installed on @widget"
                    }
                ], 
                "description": "Determines whether an accelerator that activates the signal\nidentified by @signal_id can currently be activated.\nThis is done by emitting the #GtkWidget::can-activate-accel\nsignal on @widget; if the signal isn't overridden by a\nhandler or in a derived widget, then the default check is\nthat the widget must be sensitive, and the widget and all\nits ancestors mapped."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if focus ended up inside @widget"
                }, 
                "version": "", 
                "name": "child_focus", 
                "parameters": [
                    {
                        "type": "ref:Gtk.DirectionType", 
                        "name": "direction", 
                        "description": "direction of focus movement"
                    }
                ], 
                "description": "This function is used by custom widget implementations; if you're\nwriting an app, you'd use gtk_widget_grab_focus() to move the focus\nto a particular widget, and gtk_container_set_focus_chain() to\nchange the focus tab order. So you may want to investigate those\nfunctions instead.\n\ngtk_widget_child_focus() is called by containers as the user moves\naround the window using keyboard shortcuts. @direction indicates\nwhat kind of motion is taking place (up, down, left, right, tab\nforward, tab backward). gtk_widget_child_focus() emits the\n#GtkWidget::focus signal; widgets override the default handler\nfor this signal in order to implement appropriate focus behavior.\n\nThe default ::focus handler for a widget should return %TRUE if\nmoving in @direction left the focus on a focusable location inside\nthat widget, and %FALSE if moving in @direction moved the focus\noutside the widget. If returning %TRUE, widgets normally\ncall gtk_widget_grab_focus() to place the focus accordingly;\nif returning %FALSE, they don't modify the current focus location."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "child_notify", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "child_property", 
                        "description": "the name of a child property installed on the class of @widget<!-- -->'s parent"
                    }
                ], 
                "description": "Emits a #GtkWidget::child-notify signal for the\n<link linkend=\"child-properties\">child property</link> @child_property\non @widget.\n\nThis is the analogue of g_object_notify() for child properties.\n\nAlso see gtk_container_child_notify()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "class_path", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "path_length", 
                        "description": "location to store the length of the class path, or %NULL"
                    }, 
                    {
                        "type": "String", 
                        "name": "path", 
                        "description": "location to store the class path as an allocated string, or %NULL"
                    }, 
                    {
                        "type": "String", 
                        "name": "path_reversed", 
                        "description": "location to store the reverse class path as an allocated string, or %NULL"
                    }
                ], 
                "description": "Same as gtk_widget_path(), but always uses the name of a widget's type,\nnever uses a custom name set with gtk_widget_set_name().\n\nDeprecated:3.0: Use gtk_widget_get_path() instead"
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "whether widget tree rooted here should be expanded"
                }, 
                "version": "", 
                "name": "compute_expand", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Orientation", 
                        "name": "orientation", 
                        "description": "expand direction"
                    }
                ], 
                "description": "Computes whether a container should give this widget extra space\nwhen possible. Containers should check this, rather than\nlooking at gtk_widget_get_hexpand() or gtk_widget_get_vexpand().\n\nThis function already checks whether the widget is visible, so\nvisibility does not need to be checked separately. Non-visible\nwidgets are not expanded.\n\nThe computed expand value uses either the expand setting explicitly\nset on the widget itself, or, if none has been explicitly set,\nthe widget may expand if some of its children do."
            }, 
            {
                "returns": {
                    "type": "Pango.Context", 
                    "description": "the new #PangoContext"
                }, 
                "version": "", 
                "name": "create_pango_context", 
                "parameters": null, 
                "description": "Creates a new #PangoContext with the appropriate font map,\nfont description, and base direction for drawing text for\nthis widget. See also gtk_widget_get_pango_context()."
            }, 
            {
                "returns": {
                    "type": "Pango.Layout", 
                    "description": "the new #PangoLayout"
                }, 
                "version": "", 
                "name": "create_pango_layout", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "text", 
                        "description": "text to set on the layout (can be %NULL)"
                    }
                ], 
                "description": "Creates a new #PangoLayout with the appropriate font map,\nfont description, and base direction for drawing text for\nthis widget.\n\nIf you keep a #PangoLayout created in this way around, in order to\nnotify the layout of changes to the base direction or font of this\nwidget, you must call pango_layout_context_changed() in response to\nthe #GtkWidget::style-updated and #GtkWidget::direction-changed signals\nfor the widget."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "destroy", 
                "parameters": null, 
                "description": "Destroys a widget.\n\nWhen a widget is\ndestroyed, it will break any references it holds to other objects.\nIf the widget is inside a container, the widget will be removed\nfrom the container. If the widget is a toplevel (derived from\n#GtkWindow), it will be removed from the list of toplevels, and the\nreference GTK+ holds to it will be removed. Removing a\nwidget from its container or the list of toplevels results in the\nwidget being finalized, unless you've added additional references\nto the widget with g_object_ref().\n\nIn most cases, only toplevel widgets (windows) require explicit\ndestruction, because when you destroy a toplevel its children will\nbe destroyed as well."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "destroyed", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Widget", 
                        "name": "widget_pointer", 
                        "description": "address of a variable that contains @widget"
                    }
                ], 
                "description": "This function sets *@widget_pointer to %NULL if @widget_pointer !=\n%NULL.  It's intended to be used as a callback connected to the\n\"destroy\" signal of a widget. You connect gtk_widget_destroyed()\nas a signal handler, and pass the address of your widget variable\nas user data. Then when the widget is destroyed, the variable will\nbe set to %NULL. Useful for example to avoid multiple copies\nof the same dialog."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if there is an ongoing grab on @device"
                }, 
                "version": "3.0", 
                "name": "device_is_shadowed", 
                "parameters": [
                    {
                        "type": "Gdk.Device", 
                        "name": "device", 
                        "description": "a #GdkDevice"
                    }
                ], 
                "description": "Returns %TRUE if @device has been shadowed by a GTK+\ndevice grab on another widget, so it would stop sending\nevents to @widget. This may be used in the\n#GtkWidget::grab-notify signal to check for specific\ndevices. See gtk_device_grab_add().\n\nby another #GtkWidget than @widget."
            }, 
            {
                "returns": {
                    "type": "Gdk.DragContext", 
                    "description": "the context for this drag."
                }, 
                "version": "", 
                "name": "drag_begin", 
                "parameters": [
                    {
                        "type": "ref:Gtk.TargetList", 
                        "name": "targets", 
                        "description": "The targets (data formats) in which the source can provide the data."
                    }, 
                    {
                        "type": "Gdk.DragAction", 
                        "name": "actions", 
                        "description": "A bitmask of the allowed drag actions for this drag."
                    }, 
                    {
                        "type": "Integer", 
                        "name": "button", 
                        "description": "The button the user clicked to start the drag."
                    }, 
                    {
                        "type": "Gdk.Event", 
                        "name": "event", 
                        "description": "The event that triggered the start of the drag."
                    }
                ], 
                "description": "Initiates a drag on the source side. The function\nonly needs to be used when the application is\nstarting drags itself, and is not needed when\ngtk_drag_source_set() is used.\n\nThe @event is used to retrieve the timestamp that will be used internally to\ngrab the pointer.  If @event is #NULL, then GDK_CURRENT_TIME will be used.\nHowever, you should try to pass a real event in all cases, since that can be\nused by GTK+ to get information about the start position of the drag, for\nexample if the @event is a %GDK_MOTION_NOTIFY.\n\nGenerally there are three cases when you want to start a drag by hand by\ncalling this function:\n\n1. During a #GtkWidget::button-press-event handler, if you want to start a drag\nimmediately when the user presses the mouse button.  Pass the @event\nthat you have in your #GtkWidget::button-press-event handler.\n\n2. During a #GtkWidget::motion-notify-event handler, if you want to start a drag\nwhen the mouse moves past a certain threshold distance after a button-press.\nPass the @event that you have in your #GtkWidget::motion-notify-event handler.\n\n3. During a timeout handler, if you want to start a drag after the mouse\nbutton is held down for some time.  Try to save the last event that you got\nfrom the mouse, using gdk_event_copy(), and pass it to this function\n(remember to free the event with gdk_event_free() when you are done).\nIf you can really not pass a real event, pass #NULL instead."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the drag threshold has been passed."
                }, 
                "version": "", 
                "name": "drag_check_threshold", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "start_x", 
                        "description": "X coordinate of start of drag"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "start_y", 
                        "description": "Y coordinate of start of drag"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "current_x", 
                        "description": "current X coordinate"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "current_y", 
                        "description": "current Y coordinate"
                    }
                ], 
                "description": "Checks to see if a mouse drag starting at (@start_x, @start_y) and ending\nat (@current_x, @current_y) has passed the GTK+ drag threshold, and thus\nshould trigger the beginning of a drag-and-drop operation."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.6", 
                "name": "drag_dest_add_image_targets", 
                "parameters": null, 
                "description": "Add the image targets supported by #GtkSelection to\nthe target list of the drag destination. The targets\nare added with @info = 0. If you need another value, \nuse gtk_target_list_add_image_targets() and\ngtk_drag_dest_set_target_list()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.6", 
                "name": "drag_dest_add_text_targets", 
                "parameters": null, 
                "description": "Add the text targets supported by #GtkSelection to\nthe target list of the drag destination. The targets\nare added with @info = 0. If you need another value, \nuse gtk_target_list_add_text_targets() and\ngtk_drag_dest_set_target_list()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.6", 
                "name": "drag_dest_add_uri_targets", 
                "parameters": null, 
                "description": "Add the URI targets supported by #GtkSelection to\nthe target list of the drag destination. The targets\nare added with @info = 0. If you need another value, \nuse gtk_target_list_add_uri_targets() and\ngtk_drag_dest_set_target_list()."
            }, 
            {
                "returns": {
                    "type": "Gdk.Atom", 
                    "description": "first target that the source offers"
                }, 
                "version": "", 
                "name": "drag_dest_find_target", 
                "parameters": [
                    {
                        "type": "Gdk.DragContext", 
                        "name": "context", 
                        "description": "drag context"
                    }, 
                    {
                        "type": "ref:Gtk.TargetList", 
                        "name": "target_list", 
                        "description": "list of droppable targets, or %NULL to use gtk_drag_dest_get_target_list (@widget)."
                    }
                ], 
                "description": "Looks for a match between the supported targets of @context and the\n@dest_target_list, returning the first matching target, otherwise\nreturning %GDK_NONE. @dest_target_list should usually be the return\nvalue from gtk_drag_dest_get_target_list(), but some widgets may\nhave different valid targets for different parts of the widget; in\nthat case, they will have to implement a drag_motion handler that\npasses the correct target list to this function.\n\nand the dest can accept, or %GDK_NONE"
            }, 
            {
                "returns": {
                    "type": "ref:Gtk.TargetList", 
                    "description": "the #GtkTargetList, or %NULL if none"
                }, 
                "version": "", 
                "name": "drag_dest_get_target_list", 
                "parameters": null, 
                "description": "Returns the list of targets this widget can accept from\ndrag-and-drop."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the widget always emits"
                }, 
                "version": "2.10", 
                "name": "drag_dest_get_track_motion", 
                "parameters": null, 
                "description": "Returns whether the widget has been configured to always\nemit #GtkWidget::drag-motion signals.\n\n#GtkWidget::drag-motion events"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "drag_dest_set", 
                "parameters": [
                    {
                        "type": "ref:Gtk.DestDefaults", 
                        "name": "flags", 
                        "description": "which types of default drag behavior to use"
                    }, 
                    {
                        "type": "ref:Gtk.TargetEntry[]", 
                        "name": "targets", 
                        "description": "a pointer to an array of #GtkTargetEntry<!-- -->s indicating the drop types that this @widget will accept, or %NULL. Later you can access the list with gtk_drag_dest_get_target_list() and gtk_drag_dest_find_target()."
                    }, 
                    {
                        "type": "Integer", 
                        "name": "n_targets", 
                        "description": "the number of entries in @targets"
                    }, 
                    {
                        "type": "Gdk.DragAction", 
                        "name": "actions", 
                        "description": "a bitmask of possible actions for a drop onto this @widget."
                    }
                ], 
                "description": "Sets a widget as a potential drop destination, and adds default behaviors.\n\nThe default behaviors listed in @flags have an effect similar\nto installing default handlers for the widget's drag-and-drop signals\n(#GtkWidget::drag-motion, #GtkWidget::drag-drop, ...). They all exist\nfor convenience. When passing #GTK_DEST_DEFAULT_ALL for instance it is\nsufficient to connect to the widget's #GtkWidget::drag-data-received\nsignal to get primitive, but consistent drag-and-drop support.\n\nThings become more complicated when you try to preview the dragged data,\nas described in the documentation for #GtkWidget::drag-motion. The default\nbehaviors described by @flags make some assumptions, that can conflict\nwith your own signal handlers. For instance #GTK_DEST_DEFAULT_DROP causes\ninvokations of gdk_drag_status() in the context of #GtkWidget::drag-motion,\nand invokations of gtk_drag_finish() in #GtkWidget::drag-data-received.\nEspecially the later is dramatic, when your own #GtkWidget::drag-motion\nhandler calls gtk_drag_get_data() to inspect the dragged data.\n\nThere's no way to set a default action here, you can use the\n#GtkWidget::drag-motion callback for that. Here's an example which selects\nthe action to use depending on whether the control key is pressed or not:\n|[\nstatic void\ndrag_motion (GtkWidget *widget,\nGdkDragContext *context,\ngint x,\ngint y,\nguint time)\n{\nGdkModifierType mask;\n\ngdk_window_get_pointer (gtk_widget_get_window (widget),\nNULL, NULL, &mask);\nif (mask & GDK_CONTROL_MASK)\ngdk_drag_status (context, GDK_ACTION_COPY, time);\nelse\ngdk_drag_status (context, GDK_ACTION_MOVE, time);\n}\n]|"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "drag_dest_set_proxy", 
                "parameters": [
                    {
                        "type": "Gdk.Window", 
                        "name": "proxy_window", 
                        "description": "the window to which to forward drag events"
                    }, 
                    {
                        "type": "Gdk.DragProtocol", 
                        "name": "protocol", 
                        "description": "the drag protocol which the @proxy_window accepts (You can use gdk_drag_get_protocol() to determine this)"
                    }, 
                    {
                        "type": "Boolean", 
                        "name": "use_coordinates", 
                        "description": "If %TRUE, send the same coordinates to the destination, because it is an embedded subwindow."
                    }
                ], 
                "description": "Sets this widget as a proxy for drops to another window."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "drag_dest_set_target_list", 
                "parameters": [
                    {
                        "type": "ref:Gtk.TargetList", 
                        "name": "target_list", 
                        "description": "list of droppable targets, or %NULL for none"
                    }
                ], 
                "description": "Sets the target types that this widget can accept from drag-and-drop.\nThe widget must first be made into a drag destination with\ngtk_drag_dest_set()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.10", 
                "name": "drag_dest_set_track_motion", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "track_motion", 
                        "description": "whether to accept all targets"
                    }
                ], 
                "description": "Tells the widget to emit #GtkWidget::drag-motion and\n#GtkWidget::drag-leave events regardless of the targets and the\n%GTK_DEST_DEFAULT_MOTION flag.\n\nThis may be used when a widget wants to do generic\nactions regardless of the targets that the source offers."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "drag_dest_unset", 
                "parameters": null, 
                "description": "Clears information about a drop destination set with\ngtk_drag_dest_set(). The widget will no longer receive\nnotification of drags."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "drag_get_data", 
                "parameters": [
                    {
                        "type": "Gdk.DragContext", 
                        "name": "context", 
                        "description": "the drag context"
                    }, 
                    {
                        "type": "Gdk.Atom", 
                        "name": "target", 
                        "description": "the target (form of the data) to retrieve."
                    }, 
                    {
                        "type": "Integer", 
                        "name": "time_", 
                        "description": "a timestamp for retrieving the data. This will generally be the time received in a #GtkWidget::drag-motion\" or #GtkWidget::drag-drop\" signal."
                    }
                ], 
                "description": "Gets the data associated with a drag. When the data\nis received or the retrieval fails, GTK+ will emit a\n#GtkWidget::drag-data-received signal. Failure of the retrieval\nis indicated by the length field of the @selection_data\nsignal parameter being negative. However, when gtk_drag_get_data()\nis called implicitely because the %GTK_DEST_DEFAULT_DROP was set,\nthen the widget will not receive notification of failed\ndrops."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "drag_highlight", 
                "parameters": null, 
                "description": "Draws a highlight around a widget. This will attach\nhandlers to #GtkWidget::draw, so the highlight\nwill continue to be displayed until gtk_drag_unhighlight()\nis called."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.6", 
                "name": "drag_source_add_image_targets", 
                "parameters": null, 
                "description": "Add the writable image targets supported by #GtkSelection to\nthe target list of the drag source. The targets\nare added with @info = 0. If you need another value, \nuse gtk_target_list_add_image_targets() and\ngtk_drag_source_set_target_list()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.6", 
                "name": "drag_source_add_text_targets", 
                "parameters": null, 
                "description": "Add the text targets supported by #GtkSelection to\nthe target list of the drag source.  The targets\nare added with @info = 0. If you need another value, \nuse gtk_target_list_add_text_targets() and\ngtk_drag_source_set_target_list()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.6", 
                "name": "drag_source_add_uri_targets", 
                "parameters": null, 
                "description": "Add the URI targets supported by #GtkSelection to\nthe target list of the drag source.  The targets\nare added with @info = 0. If you need another value, \nuse gtk_target_list_add_uri_targets() and\ngtk_drag_source_set_target_list()."
            }, 
            {
                "returns": {
                    "type": "ref:Gtk.TargetList", 
                    "description": "the #GtkTargetList, or %NULL if none"
                }, 
                "version": "2.4", 
                "name": "drag_source_get_target_list", 
                "parameters": null, 
                "description": "Gets the list of targets this widget can provide for\ndrag-and-drop."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "drag_source_set", 
                "parameters": [
                    {
                        "type": "Gdk.ModifierType", 
                        "name": "start_button_mask", 
                        "description": "the bitmask of buttons that can start the drag"
                    }, 
                    {
                        "type": "ref:Gtk.TargetEntry[]", 
                        "name": "targets", 
                        "description": "the table of targets that the drag will support, may be %NULL"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "n_targets", 
                        "description": "the number of items in @targets"
                    }, 
                    {
                        "type": "Gdk.DragAction", 
                        "name": "actions", 
                        "description": "the bitmask of possible actions for a drag from this widget"
                    }
                ], 
                "description": "Sets up a widget so that GTK+ will start a drag operation when the user\nclicks and drags on the widget. The widget must have a window."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.2", 
                "name": "drag_source_set_icon_gicon", 
                "parameters": [
                    {
                        "type": "Gio.Icon", 
                        "name": "icon", 
                        "description": "A #GIcon"
                    }
                ], 
                "description": "Sets the icon that will be used for drags from a particular source\nto @icon. See the docs for #GtkIconTheme for more details."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.8", 
                "name": "drag_source_set_icon_name", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "icon_name", 
                        "description": "name of icon to use"
                    }
                ], 
                "description": "Sets the icon that will be used for drags from a particular source\nto a themed icon. See the docs for #GtkIconTheme for more details."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "drag_source_set_icon_pixbuf", 
                "parameters": [
                    {
                        "type": "GdkPixbuf.Pixbuf", 
                        "name": "pixbuf", 
                        "description": "the #GdkPixbuf for the drag icon"
                    }
                ], 
                "description": "Sets the icon that will be used for drags from a particular widget\nfrom a #GdkPixbuf. GTK+ retains a reference for @pixbuf and will \nrelease it when it is no longer needed."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "drag_source_set_icon_stock", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "stock_id", 
                        "description": "the ID of the stock icon to use"
                    }
                ], 
                "description": "Sets the icon that will be used for drags from a particular source\nto a stock icon."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.4", 
                "name": "drag_source_set_target_list", 
                "parameters": [
                    {
                        "type": "ref:Gtk.TargetList", 
                        "name": "target_list", 
                        "description": "list of draggable targets, or %NULL for none"
                    }
                ], 
                "description": "Changes the target types that this widget offers for drag-and-drop.\nThe widget must first be made into a drag source with\ngtk_drag_source_set()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "drag_source_unset", 
                "parameters": null, 
                "description": "Undoes the effects of gtk_drag_source_set()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "drag_unhighlight", 
                "parameters": null, 
                "description": "Removes a highlight set by gtk_drag_highlight() from\na widget."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "draw", 
                "parameters": [
                    {
                        "type": "cairo.Context", 
                        "name": "cr", 
                        "description": "a cairo context to draw to"
                    }
                ], 
                "description": "Draws @widget to @cr. The top left corner of the widget will be\ndrawn to the currently set origin point of @cr.\n\nYou should pass a cairo context as @cr argument that is in an\noriginal state. Otherwise the resulting drawing is undefined. For\nexample changing the operator using cairo_set_operator() or the\nline width using cairo_set_line_width() might have unwanted side\neffects.\nYou may however change the context's transform matrix - like with\ncairo_scale(), cairo_translate() or cairo_set_matrix() and clip\nregion with cairo_clip() prior to calling this function. Also, it\nis fine to modify the context with cairo_save() and\ncairo_push_group() prior to calling this function.\n\n<note><para>Special purpose widgets may contain special code for\nrendering to the screen and might appear differently on screen\nand when rendered using gtk_widget_draw().</para></note>"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "ensure_style", 
                "parameters": null, 
                "description": "Ensures that @widget has a style (@widget->style).\n\nNot a very useful function; most of the time, if you\nwant the style, the widget is realized, and realized\nwidgets are guaranteed to have a style already.\n\nDeprecated:3.0: Use #GtkStyleContext instead"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.12", 
                "name": "error_bell", 
                "parameters": null, 
                "description": "Notifies the user about an input-related error on this widget.\nIf the #GtkSettings:gtk-error-bell setting is %TRUE, it calls\ngdk_window_beep(), otherwise it does nothing.\n\nNote that the effect of gdk_window_beep() can be configured in many\nways, depending on the windowing backend and the desktop environment\nor window manager that is used."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "return from the event signal emission (%TRUE if"
                }, 
                "version": "", 
                "name": "event", 
                "parameters": [
                    {
                        "type": "Gdk.Event", 
                        "name": "event", 
                        "description": "a #GdkEvent"
                    }
                ], 
                "description": "Rarely-used function. This function is used to emit\nthe event signals on a widget (those signals should never\nbe emitted without using this function to do so).\nIf you want to synthesize an event though, don't use this function;\ninstead, use gtk_main_do_event() so the event will behave as if\nit were in the event queue. Don't synthesize expose events; instead,\nuse gdk_window_invalidate_rect() to invalidate a region of the\nwindow.\n\nthe event was handled)"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "freeze_child_notify", 
                "parameters": null, 
                "description": "Stops emission of #GtkWidget::child-notify signals on @widget. The\nsignals are queued until gtk_widget_thaw_child_notify() is called\non @widget.\n\nThis is the analogue of g_object_freeze_notify() for child properties."
            }, 
            {
                "returns": {
                    "type": "Atk.Object", 
                    "description": "the #AtkObject associated with @widget"
                }, 
                "version": "", 
                "name": "get_accessible", 
                "parameters": null, 
                "description": "Returns the accessible object that describes the widget to an\nassistive technology.\n\nIf accessibility support is not available, this #AtkObject\ninstance may be a no-op. Likewise, if no class-specific #AtkObject\nimplementation is available for the widget instance in question,\nit will inherit an #AtkObject implementation from the first ancestor\nclass for which such an implementation is defined.\n\nThe documentation of the\n<ulink url=\"http://library.gnome.org/devel/atk/stable/\">ATK</ulink>\nlibrary contains more information about accessible objects and their uses."
            }, 
            {
                "returns": {
                    "type": "Integer", 
                    "description": "the height of the @widget"
                }, 
                "version": "", 
                "name": "get_allocated_height", 
                "parameters": null, 
                "description": "Returns the height that has currently been allocated to @widget.\nThis function is intended to be used when implementing handlers\nfor the #GtkWidget::draw function."
            }, 
            {
                "returns": {
                    "type": "Integer", 
                    "description": "the width of the @widget"
                }, 
                "version": "", 
                "name": "get_allocated_width", 
                "parameters": null, 
                "description": "Returns the width that has currently been allocated to @widget.\nThis function is intended to be used when implementing handlers\nfor the #GtkWidget::draw function."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.18", 
                "name": "get_allocation", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Allocation", 
                        "name": "allocation", 
                        "description": "a pointer to a #GtkAllocation to copy to"
                    }
                ], 
                "description": "Retrieves the widget's allocation.\n\nNote, when implementing a #GtkContainer: a widget's allocation will\nbe its \"adjusted\" allocation, that is, the widget's parent\ncontainer typically calls gtk_widget_size_allocate() with an\nallocation, and that allocation is then adjusted (to handle margin\nand alignment for example) before assignment to the widget.\ngtk_widget_get_allocation() returns the adjusted allocation that\nwas actually assigned to the widget. The adjusted allocation is\nguaranteed to be completely contained within the\ngtk_widget_size_allocate() allocation, however. So a #GtkContainer\nis guaranteed that its children stay inside the assigned bounds,\nbut not that they have exactly the bounds the container assigned.\nThere is no way to get the original allocation assigned by\ngtk_widget_size_allocate(), since it isn't stored; if a container\nimplementation needs that information it will have to track it itself."
            }, 
            {
                "returns": {
                    "type": "ref:Gtk.Widget", 
                    "description": "the ancestor widget, or %NULL if not found"
                }, 
                "version": "", 
                "name": "get_ancestor", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "widget_type", 
                        "description": "ancestor type"
                    }
                ], 
                "description": "Gets the first ancestor of @widget with type @widget_type. For example,\n<literal>gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)</literal> gets\nthe first #GtkBox that's an ancestor of @widget. No reference will be\nadded to the returned widget; it should not be unreferenced. See note\nabout checking for a toplevel #GtkWindow in the docs for\ngtk_widget_get_toplevel().\n\nNote that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()\nconsiders @widget to be an ancestor of itself."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the widget is app paintable"
                }, 
                "version": "2.18", 
                "name": "get_app_paintable", 
                "parameters": null, 
                "description": "Determines whether the application intends to draw on the widget in\nan #GtkWidget::draw handler.\n\nSee gtk_widget_set_app_paintable()"
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if @widget can be a default widget, %FALSE otherwise"
                }, 
                "version": "2.18", 
                "name": "get_can_default", 
                "parameters": null, 
                "description": "Determines whether @widget can be a default widget. See\ngtk_widget_set_can_default()."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if @widget can own the input focus, %FALSE otherwise"
                }, 
                "version": "2.18", 
                "name": "get_can_focus", 
                "parameters": null, 
                "description": "Determines whether @widget can own the input focus. See\ngtk_widget_set_can_focus()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "get_child_requisition", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Requisition", 
                        "name": "requisition", 
                        "description": "a #GtkRequisition to be filled in"
                    }
                ], 
                "description": "This function is only for use in widget implementations. Obtains\n@widget->requisition, unless someone has forced a particular\ngeometry on the widget (e.g. with gtk_widget_set_size_request()),\nin which case it returns that geometry instead of the widget's\nrequisition.\n\nThis function differs from gtk_widget_size_request() in that\nit retrieves the last size request value from @widget->requisition,\nwhile gtk_widget_size_request() actually calls the \"size_request\" method\non @widget to compute the size request and fill in @widget->requisition,\nand only then returns @widget->requisition.\n\nBecause this function does not call the \"size_request\" method, it\ncan only be used when you know that @widget->requisition is\nup-to-date, that is, gtk_widget_size_request() has been called\nsince the last time a resize was queued. In general, only container\nimplementations have this information; applications should use\ngtk_widget_size_request()."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the widget is mapped with the parent."
                }, 
                "version": "", 
                "name": "get_child_visible", 
                "parameters": null, 
                "description": "Gets the value set with gtk_widget_set_child_visible().\nIf you feel a need to use this function, your code probably\nneeds reorganization.\n\nThis function is only useful for container implementations and\nnever should be called by an application."
            }, 
            {
                "returns": {
                    "type": "ref:Gtk.Clipboard", 
                    "description": "the appropriate clipboard object. If no"
                }, 
                "version": "2.2", 
                "name": "get_clipboard", 
                "parameters": [
                    {
                        "type": "Gdk.Atom", 
                        "name": "selection", 
                        "description": "a #GdkAtom which identifies the clipboard to use. %GDK_SELECTION_CLIPBOARD gives the default clipboard. Another common value is %GDK_SELECTION_PRIMARY, which gives the primary X selection."
                    }
                ], 
                "description": "Returns the clipboard object for the given selection to\nbe used with @widget. @widget must have a #GdkDisplay\nassociated with it, so must be attached to a toplevel\nwindow.\n\nclipboard already exists, a new one will\nbe created. Once a clipboard object has\nbeen created, it is persistent for all time."
            }, 
            {
                "returns": {
                    "type": "String", 
                    "description": "the composite name of @widget, or %NULL if @widget is not"
                }, 
                "version": "", 
                "name": "get_composite_name", 
                "parameters": null, 
                "description": "Obtains the composite name of a widget.\n\na composite child. The string should be freed when it is no\nlonger needed."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE is @device is enabled for @widget"
                }, 
                "version": "3.0", 
                "name": "get_device_enabled", 
                "parameters": [
                    {
                        "type": "Gdk.Device", 
                        "name": "device", 
                        "description": "a #GdkDevice"
                    }
                ], 
                "description": "Returns whether @device can interact with @widget and its\nchildren. See gtk_widget_set_device_enabled()."
            }, 
            {
                "returns": {
                    "type": "Gdk.EventMask", 
                    "description": "device event mask for @widget"
                }, 
                "version": "3.0", 
                "name": "get_device_events", 
                "parameters": [
                    {
                        "type": "Gdk.Device", 
                        "name": "device", 
                        "description": "a #GdkDevice"
                    }
                ], 
                "description": "Returns the events mask for the widget corresponding to an specific device. These\nare the events that the widget will receive when @device operates on it."
            }, 
            {
                "returns": {
                    "type": "ref:Gtk.TextDirection", 
                    "description": "the reading direction for the widget."
                }, 
                "version": "", 
                "name": "get_direction", 
                "parameters": null, 
                "description": "Gets the reading direction for a particular widget. See\ngtk_widget_set_direction()."
            }, 
            {
                "returns": {
                    "type": "Gdk.Display", 
                    "description": "the #GdkDisplay for the toplevel for this widget."
                }, 
                "version": "2.2", 
                "name": "get_display", 
                "parameters": null, 
                "description": "Get the #GdkDisplay for the toplevel window associated with\nthis widget. This function can only be called after the widget\nhas been added to a widget hierarchy with a #GtkWindow at the top.\n\nIn general, you should only create display specific\nresources when a widget has been realized, and you should\nfree those resources when the widget is unrealized."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the widget is double buffered"
                }, 
                "version": "2.18", 
                "name": "get_double_buffered", 
                "parameters": null, 
                "description": "Determines whether the widget is double buffered.\n\nSee gtk_widget_set_double_buffered()"
            }, 
            {
                "returns": {
                    "type": "Integer", 
                    "description": "event mask for @widget"
                }, 
                "version": "", 
                "name": "get_events", 
                "parameters": null, 
                "description": "Returns the event mask for the widget (a bitfield containing flags\nfrom the #GdkEventMask enumeration). These are the events that the widget\nwill receive."
            }, 
            {
                "returns": {
                    "type": "ref:Gtk.Align", 
                    "description": "the horizontal alignment of @widget"
                }, 
                "version": "", 
                "name": "get_halign", 
                "parameters": null, 
                "description": "Gets the value of the #GtkWidget:halign property."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "current value of has-tooltip on @widget."
                }, 
                "version": "2.12", 
                "name": "get_has_tooltip", 
                "parameters": null, 
                "description": "Returns the current value of the has-tooltip property.  See\n#GtkWidget:has-tooltip for more information."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if @widget has a window, %FALSE otherwise"
                }, 
                "version": "2.18", 
                "name": "get_has_window", 
                "parameters": null, 
                "description": "Determines whether @widget has a #GdkWindow of its own. See\ngtk_widget_set_has_window()."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "whether hexpand flag is set"
                }, 
                "version": "", 
                "name": "get_hexpand", 
                "parameters": null, 
                "description": "Gets whether the widget would like any available extra horizontal\nspace. When a user resizes a #GtkWindow, widgets with expand=TRUE\ngenerally receive the extra space. For example, a list or\nscrollable area or document in your window would often be set to\nexpand.\n\nContainers should use gtk_widget_compute_expand() rather than\nthis function, to see whether a widget, or any of its children,\nhas the expand flag set. If any child of a widget wants to\nexpand, the parent may ask to expand also.\n\nThis function only looks at the widget's own hexpand flag, rather\nthan computing whether the entire widget tree rooted at this widget\nwants to expand."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "whether hexpand has been explicitly set"
                }, 
                "version": "", 
                "name": "get_hexpand_set", 
                "parameters": null, 
                "description": "Gets whether gtk_widget_set_hexpand() has been used to\nexplicitly set the expand flag on this widget.\n\nIf hexpand is set, then it overrides any computed\nexpand value based on child widgets. If hexpand is not\nset, then the expand value depends on whether any\nchildren of the widget would like to expand.\n\nThere are few reasons to use this function, but it's here\nfor completeness and consistency."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the widget is mapped, %FALSE otherwise."
                }, 
                "version": "2.20", 
                "name": "get_mapped", 
                "parameters": null, 
                "description": "Whether the widget is mapped."
            }, 
            {
                "returns": {
                    "type": "Integer", 
                    "description": "The bottom margin of @widget"
                }, 
                "version": "3.0", 
                "name": "get_margin_bottom", 
                "parameters": null, 
                "description": "Gets the value of the #GtkWidget:margin-bottom property."
            }, 
            {
                "returns": {
                    "type": "Integer", 
                    "description": "The left margin of @widget"
                }, 
                "version": "3.0", 
                "name": "get_margin_left", 
                "parameters": null, 
                "description": "Gets the value of the #GtkWidget:margin-left property."
            }, 
            {
                "returns": {
                    "type": "Integer", 
                    "description": "The right margin of @widget"
                }, 
                "version": "3.0", 
                "name": "get_margin_right", 
                "parameters": null, 
                "description": "Gets the value of the #GtkWidget:margin-right property."
            }, 
            {
                "returns": {
                    "type": "Integer", 
                    "description": "The top margin of @widget"
                }, 
                "version": "3.0", 
                "name": "get_margin_top", 
                "parameters": null, 
                "description": "Gets the value of the #GtkWidget:margin-top property."
            }, 
            {
                "returns": {
                    "type": "Gdk.ModifierType", 
                    "description": "the modifier mask used for @intent."
                }, 
                "version": "3.4", 
                "name": "get_modifier_mask", 
                "parameters": [
                    {
                        "type": "Gdk.ModifierIntent", 
                        "name": "intent", 
                        "description": "the use case for the modifier mask"
                    }
                ], 
                "description": "Returns the modifier mask the @widget's windowing system backend\nuses for a particular purpose.\n\nSee gdk_keymap_get_modifier_mask()."
            }, 
            {
                "returns": {
                    "type": "ref:Gtk.RcStyle", 
                    "description": "the modifier style for the widget."
                }, 
                "version": "", 
                "name": "get_modifier_style", 
                "parameters": null, 
                "description": "Returns the current modifier style for the widget. (As set by\ngtk_widget_modify_style().) If no style has previously set, a new\n#GtkRcStyle will be created with all values unset, and set as the\nmodifier style for the widget. If you make changes to this rc\nstyle, you must call gtk_widget_modify_style(), passing in the\nreturned rc style, to make sure that your changes take effect.\n\nCaution: passing the style back to gtk_widget_modify_style() will\nnormally end up destroying it, because gtk_widget_modify_style() copies\nthe passed-in style and sets the copy as the new modifier style,\nthus dropping any reference to the old modifier style. Add a reference\nto the modifier style if you want to keep it alive.\n\nThis rc style is owned by the widget. If you want to keep a\npointer to value this around, you must add a refcount using\ng_object_ref().\n\nDeprecated:3.0: Use #GtkStyleContext with a custom #GtkStyleProvider instead"
            }, 
            {
                "returns": {
                    "type": "String", 
                    "description": "name of the widget. This string is owned by GTK+ and"
                }, 
                "version": "", 
                "name": "get_name", 
                "parameters": null, 
                "description": "Retrieves the name of a widget. See gtk_widget_set_name() for the\nsignificance of widget names.\n\nshould not be modified or freed"
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "the current value of the \"no-show-all\" property."
                }, 
                "version": "2.4", 
                "name": "get_no_show_all", 
                "parameters": null, 
                "description": "Returns the current value of the #GtkWidget:no-show-all property,\nwhich determines whether calls to gtk_widget_show_all()\nwill affect this widget."
            }, 
            {
                "returns": {
                    "type": "Pango.Context", 
                    "description": "the #PangoContext for the widget."
                }, 
                "version": "", 
                "name": "get_pango_context", 
                "parameters": null, 
                "description": "Gets a #PangoContext with the appropriate font map, font description,\nand base direction for this widget. Unlike the context returned\nby gtk_widget_create_pango_context(), this context is owned by\nthe widget (it can be used until the screen for the widget changes\nor the widget is removed from its toplevel), and will be updated to\nmatch any changes to the widget's attributes.\n\nIf you create and keep a #PangoLayout using this context, you must\ndeal with changes to the context by calling pango_layout_context_changed()\non the layout in response to the #GtkWidget::style-updated and\n#GtkWidget::direction-changed signals for the widget."
            }, 
            {
                "returns": {
                    "type": "ref:Gtk.Widget", 
                    "description": "the parent container of @widget, or %NULL"
                }, 
                "version": "", 
                "name": "get_parent", 
                "parameters": null, 
                "description": "Returns the parent container of @widget."
            }, 
            {
                "returns": {
                    "type": "Gdk.Window", 
                    "description": "the parent window of @widget."
                }, 
                "version": "", 
                "name": "get_parent_window", 
                "parameters": null, 
                "description": "Gets @widget's parent window."
            }, 
            {
                "returns": {
                    "type": "ref:Gtk.WidgetPath", 
                    "description": "The #GtkWidgetPath representing @widget"
                }, 
                "version": "", 
                "name": "get_path", 
                "parameters": null, 
                "description": "Returns the #GtkWidgetPath representing @widget, if the widget\nis not connected to a toplevel widget, a partial path will be\ncreated."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "get_pointer", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "x", 
                        "description": "return location for the X coordinate, or %NULL"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "y", 
                        "description": "return location for the Y coordinate, or %NULL"
                    }
                ], 
                "description": "Obtains the location of the mouse pointer in widget coordinates.\nWidget coordinates are a bit odd; for historical reasons, they are\ndefined as @widget->window coordinates for widgets that are not\n#GTK_NO_WINDOW widgets, and are relative to @widget->allocation.x,\n@widget->allocation.y for widgets that are #GTK_NO_WINDOW widgets."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "get_preferred_height", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "minimum_height", 
                        "description": "location to store the minimum height, or %NULL"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "natural_height", 
                        "description": "location to store the natural height, or %NULL"
                    }
                ], 
                "description": "Retrieves a widget's initial minimum and natural height.\n\n<note><para>This call is specific to width-for-height requests.</para></note>\n\nThe returned request will be modified by the\nGtkWidgetClass::adjust_size_request virtual method and by any\n#GtkSizeGroup<!-- -->s that have been applied. That is, the returned request\nis the one that should be used for layout, not necessarily the one\nreturned by the widget itself."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "get_preferred_height_for_width", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "width", 
                        "description": "the width which is available for allocation"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "minimum_height", 
                        "description": "location for storing the minimum height, or %NULL"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "natural_height", 
                        "description": "location for storing the natural height, or %NULL"
                    }
                ], 
                "description": "Retrieves a widget's minimum and natural height if it would be given\nthe specified @width.\n\nThe returned request will be modified by the\nGtkWidgetClass::adjust_size_request virtual method and by any\n#GtkSizeGroup<!-- -->s that have been applied. That is, the returned request\nis the one that should be used for layout, not necessarily the one\nreturned by the widget itself."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "get_preferred_size", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Requisition", 
                        "name": "minimum_size", 
                        "description": "location for storing the minimum size, or %NULL"
                    }, 
                    {
                        "type": "ref:Gtk.Requisition", 
                        "name": "natural_size", 
                        "description": "location for storing the natural size, or %NULL"
                    }
                ], 
                "description": "Retrieves the minimum and natural size of a widget, taking\ninto account the widget's preference for height-for-width management.\n\nThis is used to retrieve a suitable size by container widgets which do\nnot impose any restrictions on the child placement. It can be used\nto deduce toplevel window and menu sizes as well as child widgets in\nfree-form containers such as GtkLayout.\n\n<note><para>Handle with care. Note that the natural height of a height-for-width\nwidget will generally be a smaller size than the minimum height, since the required\nheight for the natural width is generally smaller than the required height for\nthe minimum width.</para></note>"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "get_preferred_width", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "minimum_width", 
                        "description": "location to store the minimum width, or %NULL"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "natural_width", 
                        "description": "location to store the natural width, or %NULL"
                    }
                ], 
                "description": "Retrieves a widget's initial minimum and natural width.\n\n<note><para>This call is specific to height-for-width\nrequests.</para></note>\n\nThe returned request will be modified by the\nGtkWidgetClass::adjust_size_request virtual method and by any\n#GtkSizeGroup<!-- -->s that have been applied. That is, the returned request\nis the one that should be used for layout, not necessarily the one\nreturned by the widget itself."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "get_preferred_width_for_height", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "height", 
                        "description": "the height which is available for allocation"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "minimum_width", 
                        "description": "location for storing the minimum width, or %NULL"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "natural_width", 
                        "description": "location for storing the natural width, or %NULL"
                    }
                ], 
                "description": "Retrieves a widget's minimum and natural width if it would be given\nthe specified @height.\n\nThe returned request will be modified by the\nGtkWidgetClass::adjust_size_request virtual method and by any\n#GtkSizeGroup<!-- -->s that have been applied. That is, the returned request\nis the one that should be used for layout, not necessarily the one\nreturned by the widget itself."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if @widget is realized, %FALSE otherwise"
                }, 
                "version": "2.20", 
                "name": "get_realized", 
                "parameters": null, 
                "description": "Determines whether @widget is realized."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if @widget acts as default widget when focussed,"
                }, 
                "version": "2.18", 
                "name": "get_receives_default", 
                "parameters": null, 
                "description": "Determines whether @widget is alyways treated as default widget\nwithing its toplevel when it has the focus, even if another widget\nis the default.\n\nSee gtk_widget_set_receives_default().\n\n%FALSE otherwise"
            }, 
            {
                "returns": {
                    "type": "ref:Gtk.SizeRequestMode", 
                    "description": "The #GtkSizeRequestMode preferred by @widget."
                }, 
                "version": "3.0", 
                "name": "get_request_mode", 
                "parameters": null, 
                "description": "Gets whether the widget prefers a height-for-width layout\nor a width-for-height layout.\n\n<note><para>#GtkBin widgets generally propagate the preference of\ntheir child, container widgets need to request something either in\ncontext of their children or in context of their allocation\ncapabilities.</para></note>"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.20", 
                "name": "get_requisition", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Requisition", 
                        "name": "requisition", 
                        "description": "a pointer to a #GtkRequisition to copy to"
                    }
                ], 
                "description": "Retrieves the widget's requisition.\n\nThis function should only be used by widget implementations in\norder to figure whether the widget's requisition has actually\nchanged after some internal state change (so that they can call\ngtk_widget_queue_resize() instead of gtk_widget_queue_draw()).\n\nNormally, gtk_widget_size_request() should be used.\n\n\nremoved, If you need to cache sizes across requests and allocations,\nadd an explicit cache to the widget in question instead."
            }, 
            {
                "returns": {
                    "type": "Gdk.Window", 
                    "description": "the #GdkWindow root window for the toplevel for this widget."
                }, 
                "version": "2.2", 
                "name": "get_root_window", 
                "parameters": null, 
                "description": "Get the root window where this widget is located. This function can\nonly be called after the widget has been added to a widget\nhierarchy with #GtkWindow at the top.\n\nThe root window is useful for such purposes as creating a popup\n#GdkWindow associated with the window. In general, you should only\ncreate display specific resources when a widget has been realized,\nand you should free those resources when the widget is unrealized."
            }, 
            {
                "returns": {
                    "type": "Gdk.Screen", 
                    "description": "the #GdkScreen for the toplevel for this widget."
                }, 
                "version": "2.2", 
                "name": "get_screen", 
                "parameters": null, 
                "description": "Get the #GdkScreen from the toplevel window associated with\nthis widget. This function can only be called after the widget\nhas been added to a widget hierarchy with a #GtkWindow\nat the top.\n\nIn general, you should only create screen specific\nresources when a widget has been realized, and you should\nfree those resources when the widget is unrealized."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the widget is sensitive"
                }, 
                "version": "2.18", 
                "name": "get_sensitive", 
                "parameters": null, 
                "description": "Returns the widget's sensitivity (in the sense of returning\nthe value that has been set using gtk_widget_set_sensitive()).\n\nThe effective sensitivity of a widget is however determined by both its\nown and its parent widget's sensitivity. See gtk_widget_is_sensitive()."
            }, 
            {
                "returns": {
                    "type": "ref:Gtk.Settings", 
                    "description": "the relevant #GtkSettings object"
                }, 
                "version": "", 
                "name": "get_settings", 
                "parameters": null, 
                "description": "Gets the settings object holding the settings used for this widget.\n\nNote that this function can only be called when the #GtkWidget\nis attached to a toplevel, since the settings object is specific\nto a particular #GdkScreen."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "get_size_request", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "width", 
                        "description": "return location for width, or %NULL"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "height", 
                        "description": "return location for height, or %NULL"
                    }
                ], 
                "description": "Gets the size request that was explicitly set for the widget using\ngtk_widget_set_size_request(). A value of -1 stored in @width or\n@height indicates that that dimension has not been set explicitly\nand the natural requisition of the widget will be used intead. See\ngtk_widget_set_size_request(). To get the size a widget will\nactually request, call gtk_widget_get_preferred_size() instead of\nthis function."
            }, 
            {
                "returns": {
                    "type": "ref:Gtk.StateType", 
                    "description": "the state of @widget."
                }, 
                "version": "2.18", 
                "name": "get_state", 
                "parameters": null, 
                "description": "Returns the widget's state. See gtk_widget_set_state()."
            }, 
            {
                "returns": {
                    "type": "ref:Gtk.StateFlags", 
                    "description": "The state flags for widget"
                }, 
                "version": "3.0", 
                "name": "get_state_flags", 
                "parameters": null, 
                "description": "Returns the widget state as a flag set. It is worth mentioning\nthat the effective %GTK_STATE_FLAG_INSENSITIVE state will be\nreturned, that is, also based on parent insensitivity, even if\n@widget itself is sensitive."
            }, 
            {
                "returns": {
                    "type": "ref:Gtk.Style", 
                    "description": "the widget's #GtkStyle"
                }, 
                "version": "", 
                "name": "get_style", 
                "parameters": null, 
                "description": "Simply an accessor function that returns @widget->style.\n\n\nDeprecated:3.0: Use #GtkStyleContext instead"
            }, 
            {
                "returns": {
                    "type": "ref:Gtk.StyleContext", 
                    "description": "a #GtkStyleContext. This memory is owned by @widget and"
                }, 
                "version": "", 
                "name": "get_style_context", 
                "parameters": null, 
                "description": "Returns the style context associated to @widget.\n\nmust not be freed."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if @widget is multidevice aware."
                }, 
                "version": "", 
                "name": "get_support_multidevice", 
                "parameters": null, 
                "description": "Returns %TRUE if @widget is multiple pointer aware. See\ngtk_widget_set_support_multidevice() for more information."
            }, 
            {
                "returns": {
                    "type": "String", 
                    "description": "the tooltip text, or %NULL. You should free the"
                }, 
                "version": "2.12", 
                "name": "get_tooltip_markup", 
                "parameters": null, 
                "description": "Gets the contents of the tooltip for @widget.\n\nreturned string with g_free() when done."
            }, 
            {
                "returns": {
                    "type": "String", 
                    "description": "the tooltip text, or %NULL. You should free the"
                }, 
                "version": "2.12", 
                "name": "get_tooltip_text", 
                "parameters": null, 
                "description": "Gets the contents of the tooltip for @widget.\n\nreturned string with g_free() when done."
            }, 
            {
                "returns": {
                    "type": "ref:Gtk.Window", 
                    "description": "The #GtkWindow of the current tooltip."
                }, 
                "version": "2.12", 
                "name": "get_tooltip_window", 
                "parameters": null, 
                "description": "Returns the #GtkWindow of the current tooltip. This can be the\nGtkWindow created by default, or the custom tooltip window set\nusing gtk_widget_set_tooltip_window()."
            }, 
            {
                "returns": {
                    "type": "ref:Gtk.Widget", 
                    "description": "the topmost ancestor of @widget, or @widget itself"
                }, 
                "version": "", 
                "name": "get_toplevel", 
                "parameters": null, 
                "description": "This function returns the topmost widget in the container hierarchy\n@widget is a part of. If @widget has no parent widgets, it will be\nreturned as the topmost widget. No reference will be added to the\nreturned widget; it should not be unreferenced.\n\nNote the difference in behavior vs. gtk_widget_get_ancestor();\n<literal>gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)</literal>\nwould return\n%NULL if @widget wasn't inside a toplevel window, and if the\nwindow was inside a #GtkWindow-derived widget which was in turn\ninside the toplevel #GtkWindow. While the second case may\nseem unlikely, it actually happens when a #GtkPlug is embedded\ninside a #GtkSocket within the same application.\n\nTo reliably find the toplevel #GtkWindow, use\ngtk_widget_get_toplevel() and check if the %TOPLEVEL flags\nis set on the result.\n|[\nGtkWidget *toplevel = gtk_widget_get_toplevel (widget);\nif (gtk_widget_is_toplevel (toplevel))\n{\n/&ast; Perform action on toplevel. &ast;/\n}\n]|\n\nif there's no ancestor."
            }, 
            {
                "returns": {
                    "type": "ref:Gtk.Align", 
                    "description": "the vertical alignment of @widget"
                }, 
                "version": "", 
                "name": "get_valign", 
                "parameters": null, 
                "description": "Gets the value of the #GtkWidget:valign property."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "whether vexpand flag is set"
                }, 
                "version": "", 
                "name": "get_vexpand", 
                "parameters": null, 
                "description": "Gets whether the widget would like any available extra vertical\nspace.\n\nSee gtk_widget_get_hexpand() for more detail."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "whether vexpand has been explicitly set"
                }, 
                "version": "", 
                "name": "get_vexpand_set", 
                "parameters": null, 
                "description": "Gets whether gtk_widget_set_vexpand() has been used to\nexplicitly set the expand flag on this widget.\n\nSee gtk_widget_get_hexpand_set() for more detail."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the widget is visible"
                }, 
                "version": "2.18", 
                "name": "get_visible", 
                "parameters": null, 
                "description": "Determines whether the widget is visible. Note that this doesn't\ntake into account whether the widget's parent is also visible\nor the widget is obscured in any way.\n\nSee gtk_widget_set_visible()."
            }, 
            {
                "returns": {
                    "type": "Gdk.Visual", 
                    "description": "the visual for @widget"
                }, 
                "version": "", 
                "name": "get_visual", 
                "parameters": null, 
                "description": "Gets the visual that will be used to render @widget."
            }, 
            {
                "returns": {
                    "type": "Gdk.Window", 
                    "description": "@widget's window."
                }, 
                "version": "2.14", 
                "name": "get_window", 
                "parameters": null, 
                "description": "Returns the widget's window if it is realized, %NULL otherwise"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "grab_add", 
                "parameters": null, 
                "description": "Makes @widget the current grabbed widget.\n\nThis means that interaction with other widgets in the same\napplication is blocked and mouse as well as keyboard events\nare delivered to this widget.\n\nIf @widget is not sensitive, it is not set as the current\ngrabbed widget and this function does nothing."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "grab_default", 
                "parameters": null, 
                "description": "Causes @widget to become the default widget. @widget must have the\n%GTK_CAN_DEFAULT flag set; typically you have to set this flag\nyourself by calling <literal>gtk_widget_set_can_default (@widget,\n%TRUE)</literal>. The default widget is activated when\nthe user presses Enter in a window. Default widgets must be\nactivatable, that is, gtk_widget_activate() should affect them. Note\nthat #GtkEntry widgets require the \"activates-default\" property\nset to %TRUE before they activate the default widget when Enter\nis pressed and the #GtkEntry is focused."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "grab_focus", 
                "parameters": null, 
                "description": "Causes @widget to have the keyboard focus for the #GtkWindow it's\ninside. @widget must be a focusable widget, such as a #GtkEntry;\nsomething like #GtkFrame won't work.\n\nMore precisely, it must have the %GTK_CAN_FOCUS flag set. Use\ngtk_widget_set_can_focus() to modify that flag.\n\nThe widget also needs to be realized and mapped. This is indicated by the\nrelated signals. Grabbing the focus immediately after creating the widget\nwill likely fail and cause critical warnings."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "grab_remove", 
                "parameters": null, 
                "description": "Removes the grab from the given widget.\n\nYou have to pair calls to gtk_grab_add() and gtk_grab_remove().\n\nIf @widget does not have the grab, this function does nothing."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if @widget is the current default widget within"
                }, 
                "version": "2.18", 
                "name": "has_default", 
                "parameters": null, 
                "description": "Determines whether @widget is the current default widget within its\ntoplevel. See gtk_widget_set_can_default().\n\nits toplevel, %FALSE otherwise"
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the widget has the global input focus."
                }, 
                "version": "2.18", 
                "name": "has_focus", 
                "parameters": null, 
                "description": "Determines if the widget has the global input focus. See\ngtk_widget_is_focus() for the difference between having the global\ninput focus, and only having the focus within a toplevel."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the widget is in the grab_widgets stack"
                }, 
                "version": "2.18", 
                "name": "has_grab", 
                "parameters": null, 
                "description": "Determines whether the widget is currently grabbing events, so it\nis the only widget receiving input events (keyboard and mouse).\n\nSee also gtk_grab_add()."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the widget has been looked up through the rc"
                }, 
                "version": "2.20", 
                "name": "has_rc_style", 
                "parameters": null, 
                "description": "Determines if the widget style has been looked up through the rc mechanism.\n\nmechanism, %FALSE otherwise.\n\n\nDeprecated:3.0: Use #GtkStyleContext instead"
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if there is a #GdkScreen associcated"
                }, 
                "version": "2.2", 
                "name": "has_screen", 
                "parameters": null, 
                "description": "Checks whether there is a #GdkScreen is associated with\nthis widget. All toplevel widgets have an associated\nscreen, and all widgets added into a hierarchy with a toplevel\nwindow at the top.\n\nwith the widget."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the widget should display a 'focus rectangle'"
                }, 
                "version": "3.2", 
                "name": "has_visible_focus", 
                "parameters": null, 
                "description": "Determines if the widget should show a visible indication that\nit has the global input focus. This is a convenience function for\nuse in ::draw handlers that takes into account whether focus\nindication should currently be shown in the toplevel window of\n@widget. See gtk_window_get_focus_visible() for more information\nabout focus indication.\n\nTo find out if the widget has the global input focus, use\ngtk_widget_has_focus()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "hide", 
                "parameters": null, 
                "description": "Reverses the effects of gtk_widget_show(), causing the widget to be\nhidden (invisible to the user)."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE"
                }, 
                "version": "", 
                "name": "hide_on_delete", 
                "parameters": null, 
                "description": "Utility function; intended to be connected to the #GtkWidget::delete-event\nsignal on a #GtkWindow. The function calls gtk_widget_hide() on its\nargument, then returns %TRUE. If connected to ::delete-event, the\nresult is that clicking the close button for a window (on the\nwindow frame, top right corner usually) will hide but not destroy\nthe window. By default, GTK+ destroys windows when ::delete-event\nis received."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if @widget is being destroyed"
                }, 
                "version": "", 
                "name": "in_destruction", 
                "parameters": null, 
                "description": "Returns whether the widget is currently being destroyed.\nThis information can sometimes be used to avoid doing\nunnecessary work."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "input_shape_combine_region", 
                "parameters": [
                    {
                        "type": "cairo.Region", 
                        "name": "region", 
                        "description": "shape to be added, or %NULL to remove an existing shape"
                    }
                ], 
                "description": "Sets an input shape for this widget's GDK window. This allows for\nwindows which react to mouse click in a nonrectangular region, see\ngdk_window_input_shape_combine_region() for more information."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if there was an intersection"
                }, 
                "version": "", 
                "name": "intersect", 
                "parameters": [
                    {
                        "type": "Gdk.Rectangle", 
                        "name": "area", 
                        "description": "a rectangle"
                    }, 
                    {
                        "type": "Gdk.Rectangle", 
                        "name": "intersection", 
                        "description": "rectangle to store intersection of @widget and @area"
                    }
                ], 
                "description": "Computes the intersection of a @widget's area and @area, storing\nthe intersection in @intersection, and returns %TRUE if there was\nan intersection.  @intersection may be %NULL if you're only\ninterested in whether there was an intersection."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if @ancestor contains @widget as a child,"
                }, 
                "version": "", 
                "name": "is_ancestor", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Widget", 
                        "name": "ancestor", 
                        "description": "another #GtkWidget"
                    }
                ], 
                "description": "Determines whether @widget is somewhere inside @ancestor, possibly with\nintermediate containers.\n\ngrandchild, great grandchild, etc."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the widget can rely on its alpha"
                }, 
                "version": "2.10", 
                "name": "is_composited", 
                "parameters": null, 
                "description": "Whether @widget can rely on having its alpha channel\ndrawn correctly. On X11 this function returns whether a\ncompositing manager is running for @widget's screen.\n\nPlease note that the semantics of this call will change\nin the future if used on a widget that has a composited\nwindow in its hierarchy (as set by gdk_window_set_composited()).\n\nchannel being drawn correctly."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if @widget is drawable, %FALSE otherwise"
                }, 
                "version": "2.18", 
                "name": "is_drawable", 
                "parameters": null, 
                "description": "Determines whether @widget can be drawn to. A widget can be drawn\nto if it is mapped and visible."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the widget is the focus widget."
                }, 
                "version": "", 
                "name": "is_focus", 
                "parameters": null, 
                "description": "Determines if the widget is the focus widget within its\ntoplevel. (This does not mean that the %HAS_FOCUS flag is\nnecessarily set; %HAS_FOCUS will only be set if the\ntoplevel widget additionally has the global input focus.)"
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the widget is effectively sensitive"
                }, 
                "version": "2.18", 
                "name": "is_sensitive", 
                "parameters": null, 
                "description": "Returns the widget's effective sensitivity, which means\nit is sensitive itself and also its parent widget is sensitive"
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if @widget is a toplevel, %FALSE otherwise"
                }, 
                "version": "2.18", 
                "name": "is_toplevel", 
                "parameters": null, 
                "description": "Determines whether @widget is a toplevel widget.\n\nCurrently only #GtkWindow and #GtkInvisible (and out-of-process\n#GtkPlugs) are toplevel widgets. Toplevel widgets have no parent\nwidget."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if stopping keyboard navigation is fine, %FALSE"
                }, 
                "version": "2.12", 
                "name": "keynav_failed", 
                "parameters": [
                    {
                        "type": "ref:Gtk.DirectionType", 
                        "name": "direction", 
                        "description": "direction of focus movement"
                    }
                ], 
                "description": "This function should be called whenever keyboard navigation within\na single widget hits a boundary. The function emits the\n#GtkWidget::keynav-failed signal on the widget and its return\nvalue should be interpreted in a way similar to the return value of\ngtk_widget_child_focus():\n\nWhen %TRUE is returned, stay in the widget, the failed keyboard\nnavigation is Ok and/or there is nowhere we can/should move the\nfocus to.\n\nWhen %FALSE is returned, the caller should continue with keyboard\nnavigation outside the widget, e.g. by calling\ngtk_widget_child_focus() on the widget's toplevel.\n\nThe default ::keynav-failed handler returns %TRUE for\n%GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other\nvalues of #GtkDirectionType, it looks at the\n#GtkSettings:gtk-keynav-cursor-only setting and returns %FALSE\nif the setting is %TRUE. This way the entire user interface\nbecomes cursor-navigatable on input devices such as mobile phones\nwhich only have cursor keys but no tab key.\n\nWhenever the default handler returns %TRUE, it also calls\ngtk_widget_error_bell() to notify the user of the failed keyboard\nnavigation.\n\nA use case for providing an own implementation of ::keynav-failed\n(either by connecting to it or by overriding it) would be a row of\n#GtkEntry widgets where the user should be able to navigate the\nentire row with the cursor keys, as e.g. known from user interfaces\nthat require entering license keys.\n\nif the emitting widget should try to handle the keyboard\nnavigation attempt in its parent container(s)."
            }, 
            {
                "returns": {
                    "type": "GLib.List", 
                    "description": ""
                }, 
                "version": "", 
                "name": "list_accel_closures", 
                "parameters": null, 
                "description": "Lists the closures used by @widget for accelerator group connections\nwith gtk_accel_group_connect_by_path() or gtk_accel_group_connect().\nThe closures can be used to monitor accelerator changes on @widget,\nby connecting to the @GtkAccelGroup::accel-changed signal of the\n#GtkAccelGroup of a closure which can be found out with\ngtk_accel_group_from_accel_closure().\n\na newly allocated #GList of closures"
            }, 
            {
                "returns": {
                    "type": "GLib.List", 
                    "description": "the list of"
                }, 
                "version": "2.4", 
                "name": "list_mnemonic_labels", 
                "parameters": null, 
                "description": "Returns a newly allocated list of the widgets, normally labels, for\nwhich this widget is the target of a mnemonic (see for example,\ngtk_label_set_mnemonic_widget()).\nThe widgets in the list are not individually referenced. If you\nwant to iterate through the list and perform actions involving\ncallbacks that might destroy the widgets, you\n<emphasis>must</emphasis> call <literal>g_list_foreach (result,\n(GFunc)g_object_ref, NULL)</literal> first, and then unref all the\nwidgets afterwards.\nmnemonic labels; free this list\nwith g_list_free() when you are done with it."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "map", 
                "parameters": null, 
                "description": "This function is only for use in widget implementations. Causes\na widget to be mapped if it isn't already."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the signal has been handled"
                }, 
                "version": "", 
                "name": "mnemonic_activate", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "group_cycling", 
                        "description": "%TRUE if there are other widgets with the same mnemonic"
                    }
                ], 
                "description": "Emits the #GtkWidget::mnemonic-activate signal.\n\nThe default handler for this signal activates the @widget if\n@group_cycling is %FALSE, and just grabs the focus if @group_cycling\nis %TRUE."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "modify_base", 
                "parameters": [
                    {
                        "type": "ref:Gtk.StateType", 
                        "name": "state", 
                        "description": "the state for which to set the base color"
                    }, 
                    {
                        "type": "Gdk.Color", 
                        "name": "color", 
                        "description": "the color to assign (does not need to be allocated), or %NULL to undo the effect of previous calls to of gtk_widget_modify_base()."
                    }
                ], 
                "description": "Sets the base color for a widget in a particular state.\nAll other style values are left untouched. The base color\nis the background color used along with the text color\n(see gtk_widget_modify_text()) for widgets such as #GtkEntry\nand #GtkTextView. See also gtk_widget_modify_style().\n\n<note><para>\nNote that \"no window\" widgets (which have the %GTK_NO_WINDOW\nflag set) draw on their parent container's window and thus may\nnot draw any background themselves. This is the case for e.g.\n#GtkLabel.\n</para><para>\nTo modify the background of such widgets, you have to set the\nbase color on their parent; if you want to set the background\nof a rectangular area around a label, try placing the label in\na #GtkEventBox widget and setting the base color on that.\n</para></note>\n\nDeprecated:3.0: Use gtk_widget_override_background_color() instead"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "modify_bg", 
                "parameters": [
                    {
                        "type": "ref:Gtk.StateType", 
                        "name": "state", 
                        "description": "the state for which to set the background color"
                    }, 
                    {
                        "type": "Gdk.Color", 
                        "name": "color", 
                        "description": "the color to assign (does not need to be allocated), or %NULL to undo the effect of previous calls to of gtk_widget_modify_bg()."
                    }
                ], 
                "description": "Sets the background color for a widget in a particular state.\n\nAll other style values are left untouched.\nSee also gtk_widget_modify_style().\n\n<note><para>\nNote that \"no window\" widgets (which have the %GTK_NO_WINDOW\nflag set) draw on their parent container's window and thus may\nnot draw any background themselves. This is the case for e.g.\n#GtkLabel.\n</para><para>\nTo modify the background of such widgets, you have to set the\nbackground color on their parent; if you want to set the background\nof a rectangular area around a label, try placing the label in\na #GtkEventBox widget and setting the background color on that.\n</para></note>\n\nDeprecated:3.0: Use gtk_widget_override_background_color() instead"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.12", 
                "name": "modify_cursor", 
                "parameters": [
                    {
                        "type": "Gdk.Color", 
                        "name": "primary", 
                        "description": "the color to use for primary cursor (does not need to be allocated), or %NULL to undo the effect of previous calls to of gtk_widget_modify_cursor()."
                    }, 
                    {
                        "type": "Gdk.Color", 
                        "name": "secondary", 
                        "description": "the color to use for secondary cursor (does not need to be allocated), or %NULL to undo the effect of previous calls to of gtk_widget_modify_cursor()."
                    }
                ], 
                "description": "Sets the cursor color to use in a widget, overriding the\n#GtkWidget:cursor-color and #GtkWidget:secondary-cursor-color\nstyle properties.\n\nAll other style values are left untouched.\nSee also gtk_widget_modify_style()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "modify_fg", 
                "parameters": [
                    {
                        "type": "ref:Gtk.StateType", 
                        "name": "state", 
                        "description": "the state for which to set the foreground color"
                    }, 
                    {
                        "type": "Gdk.Color", 
                        "name": "color", 
                        "description": "the color to assign (does not need to be allocated), or %NULL to undo the effect of previous calls to of gtk_widget_modify_fg()."
                    }
                ], 
                "description": "Sets the foreground color for a widget in a particular state.\n\nAll other style values are left untouched.\nSee also gtk_widget_modify_style().\n\nDeprecated:3.0: Use gtk_widget_override_color() instead"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "modify_font", 
                "parameters": [
                    {
                        "type": "Pango.FontDescription", 
                        "name": "font_desc", 
                        "description": "the font description to use, or %NULL to undo the effect of previous calls to gtk_widget_modify_font()"
                    }
                ], 
                "description": "Sets the font to use for a widget.\n\nAll other style values are left untouched.\nSee also gtk_widget_modify_style().\n\nDeprecated:3.0: Use gtk_widget_override_font() instead"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "modify_style", 
                "parameters": [
                    {
                        "type": "ref:Gtk.RcStyle", 
                        "name": "style", 
                        "description": "the #GtkRcStyle holding the style modifications"
                    }
                ], 
                "description": "Modifies style values on the widget.\n\nModifications made using this technique take precedence over\nstyle values set via an RC file, however, they will be overridden\nif a style is explicitely set on the widget using gtk_widget_set_style().\nThe #GtkRcStyle structure is designed so each field can either be\nset or unset, so it is possible, using this function, to modify some\nstyle values and leave the others unchanged.\n\nNote that modifications made with this function are not cumulative\nwith previous calls to gtk_widget_modify_style() or with such\nfunctions as gtk_widget_modify_fg(). If you wish to retain\nprevious values, you must first call gtk_widget_get_modifier_style(),\nmake your modifications to the returned style, then call\ngtk_widget_modify_style() with that style. On the other hand,\nif you first call gtk_widget_modify_style(), subsequent calls\nto such functions gtk_widget_modify_fg() will have a cumulative\neffect with the initial modifications.\n\nDeprecated:3.0: Use #GtkStyleContext with a custom #GtkStyleProvider instead"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "modify_text", 
                "parameters": [
                    {
                        "type": "ref:Gtk.StateType", 
                        "name": "state", 
                        "description": "the state for which to set the text color"
                    }, 
                    {
                        "type": "Gdk.Color", 
                        "name": "color", 
                        "description": "the color to assign (does not need to be allocated), or %NULL to undo the effect of previous calls to of gtk_widget_modify_text()."
                    }
                ], 
                "description": "Sets the text color for a widget in a particular state.\n\nAll other style values are left untouched.\nThe text color is the foreground color used along with the\nbase color (see gtk_widget_modify_base()) for widgets such\nas #GtkEntry and #GtkTextView.\nSee also gtk_widget_modify_style().\n\nDeprecated:3.0: Use gtk_widget_override_color() instead"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "override_background_color", 
                "parameters": [
                    {
                        "type": "ref:Gtk.StateFlags", 
                        "name": "state", 
                        "description": "the state for which to set the background color"
                    }, 
                    {
                        "type": "Gdk.RGBA", 
                        "name": "color", 
                        "description": "the color to assign, or %NULL to undo the effect of previous calls to gtk_widget_override_background_color()"
                    }
                ], 
                "description": "Sets the background color to use for a widget.\n\nAll other style values are left untouched.\nSee gtk_widget_override_color()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "override_color", 
                "parameters": [
                    {
                        "type": "ref:Gtk.StateFlags", 
                        "name": "state", 
                        "description": "the state for which to set the color"
                    }, 
                    {
                        "type": "Gdk.RGBA", 
                        "name": "color", 
                        "description": "the color to assign, or %NULL to undo the effect of previous calls to gtk_widget_override_color()"
                    }
                ], 
                "description": "Sets the color to use for a widget.\n\nAll other style values are left untouched.\n\n<note><para>\nThis API is mostly meant as a quick way for applications to\nchange a widget appearance. If you are developing a widgets\nlibrary and intend this change to be themeable, it is better\ndone by setting meaningful CSS classes and regions in your\nwidget/container implementation through gtk_style_context_add_class()\nand gtk_style_context_add_region().\n</para><para>\nThis way, your widget library can install a #GtkCssProvider\nwith the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order\nto provide a default styling for those widgets that need so, and\nthis theming may fully overridden by the user's theme.\n</para></note>\n<note><para>\nNote that for complex widgets this may bring in undesired\nresults (such as uniform background color everywhere), in\nthese cases it is better to fully style such widgets through a\n#GtkCssProvider with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION\npriority.\n</para></note>"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "override_cursor", 
                "parameters": [
                    {
                        "type": "Gdk.RGBA", 
                        "name": "cursor", 
                        "description": "the color to use for primary cursor (does not need to be allocated), or %NULL to undo the effect of previous calls to of gtk_widget_override_cursor()."
                    }, 
                    {
                        "type": "Gdk.RGBA", 
                        "name": "secondary_cursor", 
                        "description": "the color to use for secondary cursor (does not need to be allocated), or %NULL to undo the effect of previous calls to of gtk_widget_override_cursor()."
                    }
                ], 
                "description": "Sets the cursor color to use in a widget, overriding the\n#GtkWidget:cursor-color and #GtkWidget:secondary-cursor-color\nstyle properties. All other style values are left untouched.\nSee also gtk_widget_modify_style().\n\nNote that the underlying properties have the #GdkColor type,\nso the alpha value in @primary and @secondary will be ignored."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "override_font", 
                "parameters": [
                    {
                        "type": "Pango.FontDescription", 
                        "name": "font_desc", 
                        "description": "the font descriptiong to use, or %NULL to undo the effect of previous calls to gtk_widget_override_font()"
                    }
                ], 
                "description": "Sets the font to use for a widget. All other style values are\nleft untouched. See gtk_widget_override_color()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "override_symbolic_color", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "name", 
                        "description": "the name of the symbolic color to modify"
                    }, 
                    {
                        "type": "Gdk.RGBA", 
                        "name": "color", 
                        "description": "the color to assign (does not need to be allocated), or %NULL to undo the effect of previous calls to gtk_widget_override_symbolic_color()"
                    }
                ], 
                "description": "Sets a symbolic color for a widget.\n\nAll other style values are left untouched.\nSee gtk_widget_override_color() for overriding the foreground\nor background color."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "path", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "path_length", 
                        "description": "location to store length of the path, or %NULL"
                    }, 
                    {
                        "type": "String", 
                        "name": "path", 
                        "description": "location to store allocated path string, or %NULL"
                    }, 
                    {
                        "type": "String", 
                        "name": "path_reversed", 
                        "description": "location to store allocated reverse path string, or %NULL"
                    }
                ], 
                "description": "Obtains the full path to @widget. The path is simply the name of a\nwidget and all its parents in the container hierarchy, separated by\nperiods. The name of a widget comes from\ngtk_widget_get_name(). Paths are used to apply styles to a widget\nin gtkrc configuration files. Widget names are the type of the\nwidget by default (e.g. \"GtkButton\") or can be set to an\napplication-specific value with gtk_widget_set_name(). By setting\nthe name of a widget, you allow users or theme authors to apply\nstyles to that specific widget in their gtkrc\nfile. @path_reversed_p fills in the path in reverse order,\ni.e. starting with @widget's name instead of starting with the name\nof @widget's outermost ancestor.\n\nDeprecated:3.0: Use gtk_widget_get_path() instead"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "queue_compute_expand", 
                "parameters": null, 
                "description": "Mark @widget as needing to recompute its expand flags. Call\nthis function when setting legacy expand child properties\non the child of a container.\n\nSee gtk_widget_compute_expand()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "queue_draw", 
                "parameters": null, 
                "description": "Equivalent to calling gtk_widget_queue_draw_area() for the\nentire area of a widget."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "queue_draw_area", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "x", 
                        "description": "x coordinate of upper-left corner of rectangle to redraw"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "y", 
                        "description": "y coordinate of upper-left corner of rectangle to redraw"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "width", 
                        "description": "width of region to draw"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "height", 
                        "description": "height of region to draw"
                    }
                ], 
                "description": "Convenience function that calls gtk_widget_queue_draw_region() on\nthe region created from the given coordinates.\n\nThe region here is specified in widget coordinates.\nWidget coordinates are a bit odd; for historical reasons, they are\ndefined as @widget->window coordinates for widgets that are not\n#GTK_NO_WINDOW widgets, and are relative to @widget->allocation.x,\n@widget->allocation.y for widgets that are #GTK_NO_WINDOW widgets."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "queue_draw_region", 
                "parameters": [
                    {
                        "type": "cairo.Region", 
                        "name": "region", 
                        "description": "region to draw"
                    }
                ], 
                "description": "Invalidates the rectangular area of @widget defined by @region by\ncalling gdk_window_invalidate_region() on the widget's window and\nall its child windows. Once the main loop becomes idle (after the\ncurrent batch of events has been processed, roughly), the window\nwill receive expose events for the union of all regions that have\nbeen invalidated.\n\nNormally you would only use this function in widget\nimplementations. You might also use it to schedule a redraw of a\n#GtkDrawingArea or some portion thereof."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "queue_resize", 
                "parameters": null, 
                "description": "This function is only for use in widget implementations.\nFlags a widget to have its size renegotiated; should\nbe called when a widget for some reason has a new size request.\nFor example, when you change the text in a #GtkLabel, #GtkLabel\nqueues a resize to ensure there's enough space for the new text.\n\n<note><para>You cannot call gtk_widget_queue_resize() on a widget\nfrom inside its implementation of the GtkWidgetClass::size_allocate \nvirtual method. Calls to gtk_widget_queue_resize() from inside\nGtkWidgetClass::size_allocate will be silently ignored.</para></note>"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.4", 
                "name": "queue_resize_no_redraw", 
                "parameters": null, 
                "description": "This function works like gtk_widget_queue_resize(),\nexcept that the widget is not invalidated."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "realize", 
                "parameters": null, 
                "description": "Creates the GDK (windowing system) resources associated with a\nwidget.  For example, @widget->window will be created when a widget\nis realized.  Normally realization happens implicitly; if you show\na widget and all its parent containers, then the widget will be\nrealized and mapped automatically.\n\nRealizing a widget requires all\nthe widget's parent widgets to be realized; calling\ngtk_widget_realize() realizes the widget's parents in addition to\n@widget itself. If a widget is not yet inside a toplevel window\nwhen you realize it, bad things will happen.\n\nThis function is primarily used in widget implementations, and\nisn't very useful otherwise. Many times when you think you might\nneed it, a better approach is to connect to a signal that will be\ncalled after the widget is realized automatically, such as\n#GtkWidget::draw. Or simply g_signal_connect () to the\n#GtkWidget::realize signal."
            }, 
            {
                "returns": {
                    "type": "cairo.Region", 
                    "description": "A newly allocated region holding the intersection of @widget"
                }, 
                "version": "", 
                "name": "region_intersect", 
                "parameters": [
                    {
                        "type": "cairo.Region", 
                        "name": "region", 
                        "description": "a #cairo_region_t, in the same coordinate system as @widget->allocation. That is, relative to @widget->window for %NO_WINDOW widgets; relative to the parent window of @widget->window for widgets with their own window."
                    }
                ], 
                "description": "Computes the intersection of a @widget's area and @region, returning\nthe intersection. The result may be empty, use cairo_region_is_empty() to\ncheck.\n\nand @region. The coordinates of the return value are relative to\n@widget->window for %NO_WINDOW widgets, and relative to the parent\nwindow of @widget->window for widgets with their own window."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "whether an accelerator was installed and could be removed"
                }, 
                "version": "", 
                "name": "remove_accelerator", 
                "parameters": [
                    {
                        "type": "ref:Gtk.AccelGroup", 
                        "name": "accel_group", 
                        "description": "accel group for this widget"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "accel_key", 
                        "description": "GDK keyval of the accelerator"
                    }, 
                    {
                        "type": "Gdk.ModifierType", 
                        "name": "accel_mods", 
                        "description": "modifier key combination of the accelerator"
                    }
                ], 
                "description": "Removes an accelerator from @widget, previously installed with\ngtk_widget_add_accelerator()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.4", 
                "name": "remove_mnemonic_label", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Widget", 
                        "name": "label", 
                        "description": "a #GtkWidget that was previously set as a mnemnic label for @widget with gtk_widget_add_mnemonic_label()."
                    }
                ], 
                "description": "Removes a widget from the list of mnemonic labels for\nthis widget. (See gtk_widget_list_mnemonic_labels()). The widget\nmust have previously been added to the list with\ngtk_widget_add_mnemonic_label()."
            }, 
            {
                "returns": {
                    "type": "GdkPixbuf.Pixbuf", 
                    "description": "a new pixbuf, or %NULL if the"
                }, 
                "version": "", 
                "name": "render_icon", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "stock_id", 
                        "description": "a stock ID"
                    }, 
                    {
                        "type": "ref:Gtk.IconSize", 
                        "name": "size", 
                        "description": "a stock size. A size of (GtkIconSize)-1 means render at the size of the source and don't scale (if there are multiple source sizes, GTK+ picks one of the available sizes)."
                    }, 
                    {
                        "type": "String", 
                        "name": "detail", 
                        "description": "render detail to pass to theme engine"
                    }
                ], 
                "description": "A convenience function that uses the theme settings for @widget\nto look up @stock_id and render it to a pixbuf. @stock_id should\nbe a stock icon ID such as #GTK_STOCK_OPEN or #GTK_STOCK_OK. @size\nshould be a size such as #GTK_ICON_SIZE_MENU. @detail should be a\nstring that identifies the widget or code doing the rendering, so\nthat theme engines can special-case rendering for that widget or\ncode.\n\nThe pixels in the returned #GdkPixbuf are shared with the rest of\nthe application and should not be modified. The pixbuf should be\nfreed after use with g_object_unref().\n\nstock ID wasn't known"
            }, 
            {
                "returns": {
                    "type": "GdkPixbuf.Pixbuf", 
                    "description": "a new pixbuf, or %NULL if the"
                }, 
                "version": "3.0", 
                "name": "render_icon_pixbuf", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "stock_id", 
                        "description": "a stock ID"
                    }, 
                    {
                        "type": "ref:Gtk.IconSize", 
                        "name": "size", 
                        "description": "a stock size. A size of (GtkIconSize)-1 means render at the size of the source and don't scale (if there are multiple source sizes, GTK+ picks one of the available sizes)."
                    }
                ], 
                "description": "A convenience function that uses the theme engine and style\nsettings for @widget to look up @stock_id and render it to\na pixbuf. @stock_id should be a stock icon ID such as\n#GTK_STOCK_OPEN or #GTK_STOCK_OK. @size should be a size\nsuch as #GTK_ICON_SIZE_MENU.\n\nThe pixels in the returned #GdkPixbuf are shared with the rest of\nthe application and should not be modified. The pixbuf should be freed\nafter use with g_object_unref().\n\nstock ID wasn't known"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "reparent", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Widget", 
                        "name": "new_parent", 
                        "description": "a #GtkContainer to move the widget into"
                    }
                ], 
                "description": "Moves a widget from one #GtkContainer to another, handling reference\ncount issues to avoid destroying the widget."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "reset_rc_styles", 
                "parameters": null, 
                "description": "Reset the styles of @widget and all descendents, so when\nthey are looked up again, they get the correct values\nfor the currently loaded RC file settings.\n\nThis function is not useful for applications.\n\nDeprecated:3.0: Use #GtkStyleContext instead, and gtk_widget_reset_style()"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "reset_style", 
                "parameters": null, 
                "description": "Updates the style context of @widget and all descendents\nby updating its widget path. #GtkContainer<!-- -->s may want\nto use this on a child when reordering it in a way that a different\nstyle might apply to it. See also gtk_container_get_path_for_child()."
            }, 
            {
                "returns": {
                    "type": "Integer", 
                    "description": "return from the event signal emission (%TRUE if"
                }, 
                "version": "", 
                "name": "send_expose", 
                "parameters": [
                    {
                        "type": "Gdk.Event", 
                        "name": "event", 
                        "description": "a expose #GdkEvent"
                    }
                ], 
                "description": "Very rarely-used function. This function is used to emit\nan expose event on a widget. This function is not normally used\ndirectly. The only time it is used is when propagating an expose\nevent to a child %NO_WINDOW widget, and that is normally done\nusing gtk_container_propagate_draw().\n\nIf you want to force an area of a window to be redrawn,\nuse gdk_window_invalidate_rect() or gdk_window_invalidate_region().\nTo cause the redraw to be done immediately, follow that call\nwith a call to gdk_window_process_updates().\n\nthe event was handled)"
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "the return value from the event signal emission: %TRUE"
                }, 
                "version": "2.20", 
                "name": "send_focus_change", 
                "parameters": [
                    {
                        "type": "Gdk.Event", 
                        "name": "event", 
                        "description": "a #GdkEvent of type GDK_FOCUS_CHANGE"
                    }
                ], 
                "description": "Sends the focus change @event to @widget\n\nThis function is not meant to be used by applications. The only time it\nshould be used is when it is necessary for a #GtkWidget to assign focus\nto a widget that is semantically owned by the first widget even though\nit's not a direct child - for instance, a search entry in a floating\nwindow similar to the quick search in #GtkTreeView.\n\nAn example of its usage is:\n\n|[\nGdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);\n\nfevent->focus_change.type = GDK_FOCUS_CHANGE;\nfevent->focus_change.in = TRUE;\nfevent->focus_change.window = gtk_widget_get_window (widget);\nif (fevent->focus_change.window != NULL)\ng_object_ref (fevent->focus_change.window);\n\ngtk_widget_send_focus_change (widget, fevent);\n\ngdk_event_free (event);\n]|\n\nif the event was handled, and %FALSE otherwise"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_accel_path", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "accel_path", 
                        "description": "path used to look up the accelerator"
                    }, 
                    {
                        "type": "ref:Gtk.AccelGroup", 
                        "name": "accel_group", 
                        "description": "a #GtkAccelGroup."
                    }
                ], 
                "description": "Given an accelerator group, @accel_group, and an accelerator path,\n@accel_path, sets up an accelerator in @accel_group so whenever the\nkey binding that is defined for @accel_path is pressed, @widget\nwill be activated.  This removes any accelerators (for any\naccelerator group) installed by previous calls to\ngtk_widget_set_accel_path(). Associating accelerators with\npaths allows them to be modified by the user and the modifications\nto be saved for future use. (See gtk_accel_map_save().)\n\nThis function is a low level function that would most likely\nbe used by a menu creation system like #GtkUIManager. If you\nuse #GtkUIManager, setting up accelerator paths will be done\nautomatically.\n\nEven when you you aren't using #GtkUIManager, if you only want to\nset up accelerators on menu items gtk_menu_item_set_accel_path()\nprovides a somewhat more convenient interface.\n\nNote that @accel_path string will be stored in a #GQuark. Therefore, if you\npass a static string, you can save some memory by interning it first with\ng_intern_static_string()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.18", 
                "name": "set_allocation", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Allocation", 
                        "name": "allocation", 
                        "description": "a pointer to a #GtkAllocation to copy from"
                    }
                ], 
                "description": "Sets the widget's allocation.  This should not be used\ndirectly, but from within a widget's size_allocate method.\n\nThe allocation set should be the \"adjusted\" or actual\nallocation. If you're implementing a #GtkContainer, you want to use\ngtk_widget_size_allocate() instead of gtk_widget_set_allocation().\nThe GtkWidgetClass::adjust_size_allocation virtual method adjusts the\nallocation inside gtk_widget_size_allocate() to create an adjusted\nallocation."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_app_paintable", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "app_paintable", 
                        "description": "%TRUE if the application will paint on the widget"
                    }
                ], 
                "description": "Sets whether the application intends to draw on the widget in\nan #GtkWidget::draw handler.\n\nThis is a hint to the widget and does not affect the behavior of\nthe GTK+ core; many widgets ignore this flag entirely. For widgets\nthat do pay attention to the flag, such as #GtkEventBox and #GtkWindow,\nthe effect is to suppress default themed drawing of the widget's\nbackground. (Children of the widget will still be drawn.) The application\nis then entirely responsible for drawing the widget background.\n\nNote that the background is still drawn when the widget is mapped."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.18", 
                "name": "set_can_default", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "can_default", 
                        "description": "whether or not @widget can be a default widget."
                    }
                ], 
                "description": "Specifies whether @widget can be a default widget. See\ngtk_widget_grab_default() for details about the meaning of\n\"default\"."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.18", 
                "name": "set_can_focus", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "can_focus", 
                        "description": "whether or not @widget can own the input focus."
                    }
                ], 
                "description": "Specifies whether @widget can own the input focus. See\ngtk_widget_grab_focus() for actually setting the input focus on a\nwidget."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_child_visible", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "is_visible", 
                        "description": "if %TRUE, @widget should be mapped along with its parent."
                    }
                ], 
                "description": "Sets whether @widget should be mapped along with its when its parent\nis mapped and @widget has been shown with gtk_widget_show().\n\nThe child visibility can be set for widget before it is added to\na container with gtk_widget_set_parent(), to avoid mapping\nchildren unnecessary before immediately unmapping them. However\nit will be reset to its default state of %TRUE when the widget\nis removed from a container.\n\nNote that changing the child visibility of a widget does not\nqueue a resize on the widget. Most of the time, the size of\na widget is computed from all visible children, whether or\nnot they are mapped. If this is not the case, the container\ncan queue a resize itself.\n\nThis function is only useful for container implementations and\nnever should be called by an application."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_composite_name", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "name", 
                        "description": "the name to set"
                    }
                ], 
                "description": "Sets a widgets composite name. The widget must be\na composite child of its parent; see gtk_widget_push_composite_child()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "set_device_enabled", 
                "parameters": [
                    {
                        "type": "Gdk.Device", 
                        "name": "device", 
                        "description": "a #GdkDevice"
                    }, 
                    {
                        "type": "Boolean", 
                        "name": "enabled", 
                        "description": "whether to enable the device"
                    }
                ], 
                "description": "Enables or disables a #GdkDevice to interact with @widget\nand all its children.\n\nIt does so by descending through the #GdkWindow hierarchy\nand enabling the same mask that is has for core events\n(i.e. the one that gdk_window_get_events() returns)."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "set_device_events", 
                "parameters": [
                    {
                        "type": "Gdk.Device", 
                        "name": "device", 
                        "description": "a #GdkDevice"
                    }, 
                    {
                        "type": "Gdk.EventMask", 
                        "name": "events", 
                        "description": "event mask"
                    }
                ], 
                "description": "Sets the device event mask (see #GdkEventMask) for a widget. The event\nmask determines which events a widget will receive from @device. Keep\nin mind that different widgets have different default event masks, and by\nchanging the event mask you may disrupt a widget's functionality,\nso be careful. This function must be called while a widget is\nunrealized. Consider gtk_widget_add_device_events() for widgets that are\nalready realized, or if you want to preserve the existing event\nmask. This function can't be used with #GTK_NO_WINDOW widgets;\nto get events on those widgets, place them inside a #GtkEventBox\nand receive events on the event box."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_direction", 
                "parameters": [
                    {
                        "type": "ref:Gtk.TextDirection", 
                        "name": "dir", 
                        "description": "the new direction"
                    }
                ], 
                "description": "Sets the reading direction on a particular widget. This direction\ncontrols the primary direction for widgets containing text,\nand also the direction in which the children of a container are\npacked. The ability to set the direction is present in order\nso that correct localization into languages with right-to-left\nreading directions can be done. Generally, applications will\nlet the default reading direction present, except for containers\nwhere the containers are arranged in an order that is explicitely\nvisual rather than logical (such as buttons for text justification).\n\nIf the direction is set to %GTK_TEXT_DIR_NONE, then the value\nset by gtk_widget_set_default_direction() will be used."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_double_buffered", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "double_buffered", 
                        "description": "%TRUE to double-buffer a widget"
                    }
                ], 
                "description": "Widgets are double buffered by default; you can use this function\nto turn off the buffering. \"Double buffered\" simply means that\ngdk_window_begin_paint_region() and gdk_window_end_paint() are called\nautomatically around expose events sent to the\nwidget. gdk_window_begin_paint() diverts all drawing to a widget's\nwindow to an offscreen buffer, and gdk_window_end_paint() draws the\nbuffer to the screen. The result is that users see the window\nupdate in one smooth step, and don't see individual graphics\nprimitives being rendered.\n\nIn very simple terms, double buffered widgets don't flicker,\nso you would only use this function to turn off double buffering\nif you had special needs and really knew what you were doing.\n\nNote: if you turn off double-buffering, you have to handle\nexpose events, since even the clearing to the background color or\npixmap will not happen automatically (as it is done in\ngdk_window_begin_paint())."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_events", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "events", 
                        "description": "event mask"
                    }
                ], 
                "description": "Sets the event mask (see #GdkEventMask) for a widget. The event\nmask determines which events a widget will receive. Keep in mind\nthat different widgets have different default event masks, and by\nchanging the event mask you may disrupt a widget's functionality,\nso be careful. This function must be called while a widget is\nunrealized. Consider gtk_widget_add_events() for widgets that are\nalready realized, or if you want to preserve the existing event\nmask. This function can't be used with #GTK_NO_WINDOW widgets;\nto get events on those widgets, place them inside a #GtkEventBox\nand receive events on the event box."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_halign", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Align", 
                        "name": "align", 
                        "description": "the horizontal alignment"
                    }
                ], 
                "description": "Sets the horizontal alignment of @widget.\nSee the #GtkWidget:halign property."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.12", 
                "name": "set_has_tooltip", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "has_tooltip", 
                        "description": "whether or not @widget has a tooltip."
                    }
                ], 
                "description": "Sets the has-tooltip property on @widget to @has_tooltip.  See\n#GtkWidget:has-tooltip for more information."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.18", 
                "name": "set_has_window", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "has_window", 
                        "description": "whether or not @widget has a window."
                    }
                ], 
                "description": "Specifies whether @widget has a #GdkWindow of its own. Note that\nall realized widgets have a non-%NULL \"window\" pointer\n(gtk_widget_get_window() never returns a %NULL window when a widget\nis realized), but for many of them it's actually the #GdkWindow of\none of its parent widgets. Widgets that do not create a %window for\nthemselves in #GtkWidget::realize must announce this by\ncalling this function with @has_window = %FALSE.\n\nThis function should only be called by widget implementations,\nand they should call it in their init() function."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_hexpand", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "expand", 
                        "description": "whether to expand"
                    }
                ], 
                "description": "Sets whether the widget would like any available extra horizontal\nspace. When a user resizes a #GtkWindow, widgets with expand=TRUE\ngenerally receive the extra space. For example, a list or\nscrollable area or document in your window would often be set to\nexpand.\n\nCall this function to set the expand flag if you would like your\nwidget to become larger horizontally when the window has extra\nroom.\n\nBy default, widgets automatically expand if any of their children\nwant to expand. (To see if a widget will automatically expand given\nits current children and state, call gtk_widget_compute_expand(). A\ncontainer can decide how the expandability of children affects the\nexpansion of the container by overriding the compute_expand virtual\nmethod on #GtkWidget.).\n\nSetting hexpand explicitly with this function will override the\nautomatic expand behavior.\n\nThis function forces the widget to expand or not to expand,\nregardless of children.  The override occurs because\ngtk_widget_set_hexpand() sets the hexpand-set property (see\ngtk_widget_set_hexpand_set()) which causes the widget's hexpand\nvalue to be used, rather than looking at children and widget state."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_hexpand_set", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "set", 
                        "description": "value for hexpand-set property"
                    }
                ], 
                "description": "Sets whether the hexpand flag (see gtk_widget_get_hexpand()) will\nbe used.\n\nThe hexpand-set property will be set automatically when you call\ngtk_widget_set_hexpand() to set hexpand, so the most likely\nreason to use this function would be to unset an explicit expand\nflag.\n\nIf hexpand is set, then it overrides any computed\nexpand value based on child widgets. If hexpand is not\nset, then the expand value depends on whether any\nchildren of the widget would like to expand.\n\nThere are few reasons to use this function, but it's here\nfor completeness and consistency."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.20", 
                "name": "set_mapped", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "mapped", 
                        "description": "%TRUE to mark the widget as mapped"
                    }
                ], 
                "description": "Marks the widget as being realized.\n\nThis function should only ever be called in a derived widget's\n\"map\" or \"unmap\" implementation."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "set_margin_bottom", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "margin", 
                        "description": "the bottom margin"
                    }
                ], 
                "description": "Sets the bottom margin of @widget.\nSee the #GtkWidget:margin-bottom property."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "set_margin_left", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "margin", 
                        "description": "the left margin"
                    }
                ], 
                "description": "Sets the left margin of @widget.\nSee the #GtkWidget:margin-left property."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "set_margin_right", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "margin", 
                        "description": "the right margin"
                    }
                ], 
                "description": "Sets the right margin of @widget.\nSee the #GtkWidget:margin-right property."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "set_margin_top", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "margin", 
                        "description": "the top margin"
                    }
                ], 
                "description": "Sets the top margin of @widget.\nSee the #GtkWidget:margin-top property."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_name", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "name", 
                        "description": "name for the widget"
                    }
                ], 
                "description": "Widgets can be named, which allows you to refer to them from a\nCSS file. You can apply a style to widgets with a particular name\nin the CSS file. See the documentation for the CSS syntax (on the\nsame page as the docs for #GtkStyleContext).\n\nNote that the CSS syntax has certain special characters to delimit\nand represent elements in a selector (period, &num;, &gt;, &ast;...),\nso using these will make your widget impossible to match by name.\nAny combination of alphanumeric symbols, dashes and underscores will\nsuffice."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.4", 
                "name": "set_no_show_all", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "no_show_all", 
                        "description": "the new value for the \"no-show-all\" property"
                    }
                ], 
                "description": "Sets the #GtkWidget:no-show-all property, which determines whether\ncalls to gtk_widget_show_all() will affect this widget.\n\nThis is mostly for use in constructing widget hierarchies with externally\ncontrolled visibility, see #GtkUIManager."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_parent", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Widget", 
                        "name": "parent", 
                        "description": "parent container"
                    }
                ], 
                "description": "This function is useful only when implementing subclasses of\n#GtkContainer.\nSets the container as the parent of @widget, and takes care of\nsome details such as updating the state and style of the child\nto reflect its new location. The opposite function is\ngtk_widget_unparent()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_parent_window", 
                "parameters": [
                    {
                        "type": "Gdk.Window", 
                        "name": "parent_window", 
                        "description": "the new parent window."
                    }
                ], 
                "description": "Sets a non default parent window for @widget.\n\nFor GtkWindow classes, setting a @parent_window effects whether\nthe window is a toplevel window or can be embedded into other\nwidgets.\n\n<note><para>\nFor GtkWindow classes, this needs to be called before the\nwindow is realized.\n</para></note>"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.20", 
                "name": "set_realized", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "realized", 
                        "description": "%TRUE to mark the widget as realized"
                    }
                ], 
                "description": "Marks the widget as being realized.\n\nThis function should only ever be called in a derived widget's\n\"realize\" or \"unrealize\" implementation."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.18", 
                "name": "set_receives_default", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "receives_default", 
                        "description": "whether or not @widget can be a default widget."
                    }
                ], 
                "description": "Specifies whether @widget will be treated as the default widget\nwithin its toplevel when it has the focus, even if another widget\nis the default.\n\nSee gtk_widget_grab_default() for details about the meaning of\n\"default\"."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_redraw_on_allocate", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "redraw_on_allocate", 
                        "description": "if %TRUE, the entire widget will be redrawn when it is allocated to a new size. Otherwise, only the new portion of the widget will be redrawn."
                    }
                ], 
                "description": "Sets whether the entire widget is queued for drawing when its size\nallocation changes. By default, this setting is %TRUE and\nthe entire widget is redrawn on every size change. If your widget\nleaves the upper left unchanged when made bigger, turning this\nsetting off will improve performance.\nNote that for %NO_WINDOW widgets setting this flag to %FALSE turns\noff all allocation on resizing: the widget will not even redraw if\nits position changes; this is to allow containers that don't draw\nanything to avoid excess invalidations. If you set this flag on a\n%NO_WINDOW widget that <emphasis>does</emphasis> draw on @widget->window,\nyou are responsible for invalidating both the old and new allocation\nof the widget when the widget is moved and responsible for invalidating\nregions newly when the widget increases size."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_sensitive", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "sensitive", 
                        "description": "%TRUE to make the widget sensitive"
                    }
                ], 
                "description": "Sets the sensitivity of a widget. A widget is sensitive if the user\ncan interact with it. Insensitive widgets are \"grayed out\" and the\nuser can't interact with them. Insensitive widgets are known as\n\"inactive\", \"disabled\", or \"ghosted\" in some other toolkits."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_size_request", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "width", 
                        "description": "width @widget should request, or -1 to unset"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "height", 
                        "description": "height @widget should request, or -1 to unset"
                    }
                ], 
                "description": "Sets the minimum size of a widget; that is, the widget's size\nrequest will be @width by @height. You can use this function to\nforce a widget to be either larger or smaller than it normally\nwould be.\n\nIn most cases, gtk_window_set_default_size() is a better choice for\ntoplevel windows than this function; setting the default size will\nstill allow users to shrink the window. Setting the size request\nwill force them to leave the window at least as large as the size\nrequest. When dealing with window sizes,\ngtk_window_set_geometry_hints() can be a useful function as well.\n\nNote the inherent danger of setting any fixed size - themes,\ntranslations into other languages, different fonts, and user action\ncan all change the appropriate size for a given widget. So, it's\nbasically impossible to hardcode a size that will always be\ncorrect.\n\nThe size request of a widget is the smallest size a widget can\naccept while still functioning well and drawing itself correctly.\nHowever in some strange cases a widget may be allocated less than\nits requested size, and in many cases a widget may be allocated more\nspace than it requested.\n\nIf the size request in a given direction is -1 (unset), then\nthe \"natural\" size request of the widget will be used instead.\n\nWidgets can't actually be allocated a size less than 1 by 1, but\nyou can pass 0,0 to this function to mean \"as small as possible.\"\n\nThe size request set here does not include any margin from the\n#GtkWidget properties margin-left, margin-right, margin-top, and\nmargin-bottom, but it does include pretty much all other padding\nor border properties set by any subclass of #GtkWidget."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_state", 
                "parameters": [
                    {
                        "type": "ref:Gtk.StateType", 
                        "name": "state", 
                        "description": "new state for @widget"
                    }
                ], 
                "description": "This function is for use in widget implementations. Sets the state\nof a widget (insensitive, prelighted, etc.) Usually you should set\nthe state using wrapper functions such as gtk_widget_set_sensitive()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "set_state_flags", 
                "parameters": [
                    {
                        "type": "ref:Gtk.StateFlags", 
                        "name": "flags", 
                        "description": "State flags to turn on"
                    }, 
                    {
                        "type": "Boolean", 
                        "name": "clear", 
                        "description": "Whether to clear state before turning on @flags"
                    }
                ], 
                "description": "This function is for use in widget implementations. Turns on flag\nvalues in the current widget state (insensitive, prelighted, etc.).\n\nIt is worth mentioning that any other state than %GTK_STATE_FLAG_INSENSITIVE,\nwill be propagated down to all non-internal children if @widget is a\n#GtkContainer, while %GTK_STATE_FLAG_INSENSITIVE itself will be propagated\ndown to all #GtkContainer children by different means than turning on the\nstate flag down the hierarchy, both gtk_widget_get_state_flags() and\ngtk_widget_is_sensitive() will make use of these."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_style", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Style", 
                        "name": "style", 
                        "description": "a #GtkStyle, or %NULL to remove the effect of a previous call to gtk_widget_set_style() and go back to the default style"
                    }
                ], 
                "description": "Used to set the #GtkStyle for a widget (@widget->style). Since\nGTK 3, this function does nothing, the passed in style is ignored.\n\nDeprecated:3.0: Use #GtkStyleContext instead"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "set_support_multidevice", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "support_multidevice", 
                        "description": "%TRUE to support input from multiple devices."
                    }
                ], 
                "description": "Enables or disables multiple pointer awareness. If this setting is %TRUE,\n@widget will start receiving multiple, per device enter/leave events. Note\nthat if custom #GdkWindow<!-- -->s are created in #GtkWidget::realize,\ngdk_window_set_support_multidevice() will have to be called manually on them."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.12", 
                "name": "set_tooltip_markup", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "markup", 
                        "description": "the contents of the tooltip for @widget, or %NULL"
                    }
                ], 
                "description": "Sets @markup as the contents of the tooltip, which is marked up with\nthe <link linkend=\"PangoMarkupFormat\">Pango text markup language</link>.\n\nThis function will take care of setting #GtkWidget:has-tooltip to %TRUE\nand of the default handler for the #GtkWidget::query-tooltip signal.\n\nSee also the #GtkWidget:tooltip-markup property and\ngtk_tooltip_set_markup()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.12", 
                "name": "set_tooltip_text", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "text", 
                        "description": "the contents of the tooltip for @widget"
                    }
                ], 
                "description": "Sets @text as the contents of the tooltip. This function will take\ncare of setting #GtkWidget:has-tooltip to %TRUE and of the default\nhandler for the #GtkWidget::query-tooltip signal.\n\nSee also the #GtkWidget:tooltip-text property and gtk_tooltip_set_text()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.12", 
                "name": "set_tooltip_window", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Window", 
                        "name": "custom_window", 
                        "description": "a #GtkWindow, or %NULL"
                    }
                ], 
                "description": "Replaces the default, usually yellow, window used for displaying\ntooltips with @custom_window. GTK+ will take care of showing and\nhiding @custom_window at the right moment, to behave likewise as\nthe default tooltip window. If @custom_window is %NULL, the default\ntooltip window will be used.\n\nIf the custom window should have the default theming it needs to\nhave the name \"gtk-tooltip\", see gtk_widget_set_name()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_valign", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Align", 
                        "name": "align", 
                        "description": "the vertical alignment"
                    }
                ], 
                "description": "Sets the vertical alignment of @widget.\nSee the #GtkWidget:valign property."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_vexpand", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "expand", 
                        "description": "whether to expand"
                    }
                ], 
                "description": "Sets whether the widget would like any available extra vertical\nspace.\n\nSee gtk_widget_set_hexpand() for more detail."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_vexpand_set", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "set", 
                        "description": "value for vexpand-set property"
                    }
                ], 
                "description": "Sets whether the vexpand flag (see gtk_widget_get_vexpand()) will\nbe used.\n\nSee gtk_widget_set_hexpand_set() for more detail."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.18", 
                "name": "set_visible", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "visible", 
                        "description": "whether the widget should be shown or not"
                    }
                ], 
                "description": "Sets the visibility state of @widget. Note that setting this to\n%TRUE doesn't mean the widget is actually viewable, see\ngtk_widget_get_visible().\n\nThis function simply calls gtk_widget_show() or gtk_widget_hide()\nbut is nicer to use when the visibility of the widget depends on\nsome condition."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "set_visual", 
                "parameters": [
                    {
                        "type": "Gdk.Visual", 
                        "name": "visual", 
                        "description": "visual to be used or %NULL to unset a previous one"
                    }
                ], 
                "description": "Sets the visual that should be used for by widget and its children for\ncreating #GdkWindows. The visual must be on the same #GdkScreen as\nreturned by gdk_widget_get_screen(), so handling the\n#GtkWidget::screen-changed signal is necessary.\n\nSetting a new @visual will not cause @widget to recreate its windows,\nso you should call this function before @widget is realized."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.18", 
                "name": "set_window", 
                "parameters": [
                    {
                        "type": "Gdk.Window", 
                        "name": "window", 
                        "description": "a #GdkWindow"
                    }
                ], 
                "description": "Sets a widget's window. This function should only be used in a\nwidget's #GtkWidget::realize implementation. The %window passed is\nusually either new window created with gdk_window_new(), or the\nwindow of its parent widget as returned by\ngtk_widget_get_parent_window().\n\nWidgets must indicate whether they will create their own #GdkWindow\nby calling gtk_widget_set_has_window(). This is usually done in the\nwidget's init() function.\n\n<note><para>This function does not add any reference to @window.</para></note>"
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "shape_combine_region", 
                "parameters": [
                    {
                        "type": "cairo.Region", 
                        "name": "region", 
                        "description": "shape to be added, or %NULL to remove an existing shape"
                    }
                ], 
                "description": "Sets a shape for this widget's GDK window. This allows for\ntransparent windows etc., see gdk_window_shape_combine_region()\nfor more information."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "show", 
                "parameters": null, 
                "description": "Flags a widget to be displayed. Any widget that isn't shown will\nnot appear on the screen. If you want to show all the widgets in a\ncontainer, it's easier to call gtk_widget_show_all() on the\ncontainer, instead of individually showing the widgets.\n\nRemember that you have to show the containers containing a widget,\nin addition to the widget itself, before it will appear onscreen.\n\nWhen a toplevel container is shown, it is immediately realized and\nmapped; other shown widgets are realized and mapped when their\ntoplevel container is realized and mapped."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "show_all", 
                "parameters": null, 
                "description": "Recursively shows a widget, and any child widgets (if the widget is\na container)."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "show_now", 
                "parameters": null, 
                "description": "Shows a widget. If the widget is an unmapped toplevel widget\n(i.e. a #GtkWindow that has not yet been shown), enter the main\nloop and wait for the window to actually be mapped. Be careful;\nbecause the main loop is running, anything can happen during\nthis function."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "size_allocate", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Allocation", 
                        "name": "allocation", 
                        "description": "position and size to be allocated to @widget"
                    }
                ], 
                "description": "This function is only used by #GtkContainer subclasses, to assign a size\nand position to their child widgets.\n\nIn this function, the allocation may be adjusted. It will be forced\nto a 1x1 minimum size, and the adjust_size_allocation virtual\nmethod on the child will be used to adjust the allocation. Standard\nadjustments include removing the widget's margins, and applying the\nwidget's #GtkWidget:halign and #GtkWidget:valign properties."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "size_request", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Requisition", 
                        "name": "requisition", 
                        "description": "a #GtkRequisition to be filled in"
                    }
                ], 
                "description": "This function is typically used when implementing a #GtkContainer\nsubclass.  Obtains the preferred size of a widget. The container\nuses this information to arrange its child widgets and decide what\nsize allocations to give them with gtk_widget_size_allocate().\n\nYou can also call this function from an application, with some\ncaveats. Most notably, getting a size request requires the widget\nto be associated with a screen, because font information may be\nneeded. Multihead-aware applications should keep this in mind.\n\nAlso remember that the size request is not necessarily the size\na widget will actually be allocated."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.20", 
                "name": "style_attach", 
                "parameters": null, 
                "description": "This function attaches the widget's #GtkStyle to the widget's\n#GdkWindow. It is a replacement for\n\n<programlisting>\nwidget->style = gtk_style_attach (widget->style, widget->window);\n</programlisting>\n\nand should only ever be called in a derived widget's \"realize\"\nimplementation which does not chain up to its parent class'\n\"realize\" implementation, because one of the parent classes\n(finally #GtkWidget) would attach the style itself."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "style_get", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "first_property_name", 
                        "description": "the name of the first property to get"
                    }, 
                    {
                        "type": "ref:VarArg", 
                        "name": null, 
                        "description": ""
                    }
                ], 
                "description": "Gets the values of a multiple style properties of @widget."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "style_get_property", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "property_name", 
                        "description": "the name of a style property"
                    }, 
                    {
                        "type": "GObject.Value", 
                        "name": "value", 
                        "description": "location to return the property value"
                    }
                ], 
                "description": "Gets the value of a style property of @widget."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "style_get_valist", 
                "parameters": [
                    {
                        "type": "String", 
                        "name": "first_property_name", 
                        "description": "the name of the first property to get"
                    }, 
                    {
                        "type": "Mixed", 
                        "name": "var_args", 
                        "description": "a <type>va_list</type> of pairs of property names and locations to return the property values, starting with the location for @first_property_name."
                    }
                ], 
                "description": "Non-vararg variant of gtk_widget_style_get(). Used primarily by language\nbindings."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "thaw_child_notify", 
                "parameters": null, 
                "description": "Reverts the effect of a previous call to gtk_widget_freeze_child_notify().\nThis causes all queued #GtkWidget::child-notify signals on @widget to be\nemitted."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%FALSE if either widget was not realized, or there"
                }, 
                "version": "", 
                "name": "translate_coordinates", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Widget", 
                        "name": "dest_widget", 
                        "description": "a #GtkWidget"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "src_x", 
                        "description": "X position relative to @src_widget"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "src_y", 
                        "description": "Y position relative to @src_widget"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "dest_x", 
                        "description": "location to store X position relative to @dest_widget"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "dest_y", 
                        "description": "location to store Y position relative to @dest_widget"
                    }
                ], 
                "description": "Translate coordinates relative to @src_widget's allocation to coordinates\nrelative to @dest_widget's allocations. In order to perform this\noperation, both widgets must be realized, and must share a common\ntoplevel.\n\nwas no common ancestor. In this case, nothing is stored in\n*@dest_x and *@dest_y. Otherwise %TRUE."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "2.12", 
                "name": "trigger_tooltip_query", 
                "parameters": null, 
                "description": "Triggers a tooltip query on the display where the toplevel of @widget\nis located. See gtk_tooltip_trigger_tooltip_query() for more\ninformation."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "unmap", 
                "parameters": null, 
                "description": "This function is only for use in widget implementations. Causes\na widget to be unmapped if it's currently mapped."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "unparent", 
                "parameters": null, 
                "description": "This function is only for use in widget implementations.\nShould be called by implementations of the remove method\non #GtkContainer, to dissociate a child from the container."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "unrealize", 
                "parameters": null, 
                "description": "This function is only useful in widget implementations.\nCauses a widget to be unrealized (frees all GDK resources\nassociated with the widget, such as @widget->window)."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "unset_state_flags", 
                "parameters": [
                    {
                        "type": "ref:Gtk.StateFlags", 
                        "name": "flags", 
                        "description": "State flags to turn off"
                    }
                ], 
                "description": "This function is for use in widget implementations. Turns off flag\nvalues for the current widget state (insensitive, prelighted, etc.).\nSee gtk_widget_set_state_flags()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "adjust_size_allocation", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Orientation", 
                        "name": "orientation", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "minimum_size", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "natural_size", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "allocated_pos", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "allocated_size", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "adjust_size_request", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Orientation", 
                        "name": "orientation", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "minimum_size", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "natural_size", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "button_press_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventButton", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "button_release_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventButton", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the accelerator can be activated."
                }, 
                "version": "2.4", 
                "name": "can_activate_accel", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "signal_id", 
                        "description": "the ID of a signal installed on @widget"
                    }
                ], 
                "description": "Determines whether an accelerator that activates the signal\nidentified by @signal_id can currently be activated.\nThis is done by emitting the #GtkWidget::can-activate-accel\nsignal on @widget; if the signal isn't overridden by a\nhandler or in a derived widget, then the default check is\nthat the widget must be sensitive, and the widget and all\nits ancestors mapped."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "child_notify", 
                "parameters": [
                    {
                        "type": "GObject.ParamSpec", 
                        "name": "pspec", 
                        "description": ""
                    }
                ], 
                "description": "Emits a #GtkWidget::child-notify signal for the\n<link linkend=\"child-properties\">child property</link> @child_property\non @widget.\n\nThis is the analogue of g_object_notify() for child properties.\n\nAlso see gtk_container_child_notify()."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "composited_changed", 
                "parameters": null, 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "compute_expand", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "hexpand_p", 
                        "description": ""
                    }, 
                    {
                        "type": "Boolean", 
                        "name": "vexpand_p", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "configure_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventConfigure", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "damage_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventExpose", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "delete_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventAny", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "destroy", 
                "parameters": null, 
                "description": "Destroys a widget.\n\nWhen a widget is\ndestroyed, it will break any references it holds to other objects.\nIf the widget is inside a container, the widget will be removed\nfrom the container. If the widget is a toplevel (derived from\n#GtkWindow), it will be removed from the list of toplevels, and the\nreference GTK+ holds to it will be removed. Removing a\nwidget from its container or the list of toplevels results in the\nwidget being finalized, unless you've added additional references\nto the widget with g_object_ref().\n\nIn most cases, only toplevel widgets (windows) require explicit\ndestruction, because when you destroy a toplevel its children will\nbe destroyed as well."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "destroy_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventAny", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "direction_changed", 
                "parameters": [
                    {
                        "type": "ref:Gtk.TextDirection", 
                        "name": "previous_direction", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "dispatch_child_properties_changed", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "n_pspecs", 
                        "description": ""
                    }, 
                    {
                        "type": "GObject.ParamSpec", 
                        "name": "pspecs", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "drag_begin", 
                "parameters": [
                    {
                        "type": "Gdk.DragContext", 
                        "name": "context", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "drag_data_delete", 
                "parameters": [
                    {
                        "type": "Gdk.DragContext", 
                        "name": "context", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "drag_data_get", 
                "parameters": [
                    {
                        "type": "Gdk.DragContext", 
                        "name": "context", 
                        "description": ""
                    }, 
                    {
                        "type": "ref:Gtk.SelectionData", 
                        "name": "selection_data", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "info", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "time_", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "drag_data_received", 
                "parameters": [
                    {
                        "type": "Gdk.DragContext", 
                        "name": "context", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "x", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "y", 
                        "description": ""
                    }, 
                    {
                        "type": "ref:Gtk.SelectionData", 
                        "name": "selection_data", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "info", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "time_", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "drag_drop", 
                "parameters": [
                    {
                        "type": "Gdk.DragContext", 
                        "name": "context", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "x", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "y", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "time_", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "drag_end", 
                "parameters": [
                    {
                        "type": "Gdk.DragContext", 
                        "name": "context", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "drag_failed", 
                "parameters": [
                    {
                        "type": "Gdk.DragContext", 
                        "name": "context", 
                        "description": ""
                    }, 
                    {
                        "type": "ref:Gtk.DragResult", 
                        "name": "result", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "drag_leave", 
                "parameters": [
                    {
                        "type": "Gdk.DragContext", 
                        "name": "context", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "time_", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "drag_motion", 
                "parameters": [
                    {
                        "type": "Gdk.DragContext", 
                        "name": "context", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "x", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "y", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "time_", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "draw", 
                "parameters": [
                    {
                        "type": "cairo.Context", 
                        "name": "cr", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "enter_notify_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventCrossing", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "return from the event signal emission (%TRUE if"
                }, 
                "version": "", 
                "name": "event", 
                "parameters": [
                    {
                        "type": "Gdk.Event", 
                        "name": "event", 
                        "description": "a #GdkEvent"
                    }
                ], 
                "description": "Rarely-used function. This function is used to emit\nthe event signals on a widget (those signals should never\nbe emitted without using this function to do so).\nIf you want to synthesize an event though, don't use this function;\ninstead, use gtk_main_do_event() so the event will behave as if\nit were in the event queue. Don't synthesize expose events; instead,\nuse gdk_window_invalidate_rect() to invalidate a region of the\nwindow.\n\nthe event was handled)"
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "focus", 
                "parameters": [
                    {
                        "type": "ref:Gtk.DirectionType", 
                        "name": "direction", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "focus_in_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventFocus", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "focus_out_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventFocus", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Atk.Object", 
                    "description": "the #AtkObject associated with @widget"
                }, 
                "version": "", 
                "name": "get_accessible", 
                "parameters": null, 
                "description": "Returns the accessible object that describes the widget to an\nassistive technology.\n\nIf accessibility support is not available, this #AtkObject\ninstance may be a no-op. Likewise, if no class-specific #AtkObject\nimplementation is available for the widget instance in question,\nit will inherit an #AtkObject implementation from the first ancestor\nclass for which such an implementation is defined.\n\nThe documentation of the\n<ulink url=\"http://library.gnome.org/devel/atk/stable/\">ATK</ulink>\nlibrary contains more information about accessible objects and their uses."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "get_preferred_height", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "minimum_height", 
                        "description": "location to store the minimum height, or %NULL"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "natural_height", 
                        "description": "location to store the natural height, or %NULL"
                    }
                ], 
                "description": "Retrieves a widget's initial minimum and natural height.\n\n<note><para>This call is specific to width-for-height requests.</para></note>\n\nThe returned request will be modified by the\nGtkWidgetClass::adjust_size_request virtual method and by any\n#GtkSizeGroup<!-- -->s that have been applied. That is, the returned request\nis the one that should be used for layout, not necessarily the one\nreturned by the widget itself."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "get_preferred_height_for_width", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "width", 
                        "description": "the width which is available for allocation"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "minimum_height", 
                        "description": "location for storing the minimum height, or %NULL"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "natural_height", 
                        "description": "location for storing the natural height, or %NULL"
                    }
                ], 
                "description": "Retrieves a widget's minimum and natural height if it would be given\nthe specified @width.\n\nThe returned request will be modified by the\nGtkWidgetClass::adjust_size_request virtual method and by any\n#GtkSizeGroup<!-- -->s that have been applied. That is, the returned request\nis the one that should be used for layout, not necessarily the one\nreturned by the widget itself."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "get_preferred_width", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "minimum_width", 
                        "description": "location to store the minimum width, or %NULL"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "natural_width", 
                        "description": "location to store the natural width, or %NULL"
                    }
                ], 
                "description": "Retrieves a widget's initial minimum and natural width.\n\n<note><para>This call is specific to height-for-width\nrequests.</para></note>\n\nThe returned request will be modified by the\nGtkWidgetClass::adjust_size_request virtual method and by any\n#GtkSizeGroup<!-- -->s that have been applied. That is, the returned request\nis the one that should be used for layout, not necessarily the one\nreturned by the widget itself."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "3.0", 
                "name": "get_preferred_width_for_height", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "height", 
                        "description": "the height which is available for allocation"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "minimum_width", 
                        "description": "location for storing the minimum width, or %NULL"
                    }, 
                    {
                        "type": "Integer", 
                        "name": "natural_width", 
                        "description": "location for storing the natural width, or %NULL"
                    }
                ], 
                "description": "Retrieves a widget's minimum and natural width if it would be given\nthe specified @height.\n\nThe returned request will be modified by the\nGtkWidgetClass::adjust_size_request virtual method and by any\n#GtkSizeGroup<!-- -->s that have been applied. That is, the returned request\nis the one that should be used for layout, not necessarily the one\nreturned by the widget itself."
            }, 
            {
                "returns": {
                    "type": "ref:Gtk.SizeRequestMode", 
                    "description": "The #GtkSizeRequestMode preferred by @widget."
                }, 
                "version": "3.0", 
                "name": "get_request_mode", 
                "parameters": null, 
                "description": "Gets whether the widget prefers a height-for-width layout\nor a width-for-height layout.\n\n<note><para>#GtkBin widgets generally propagate the preference of\ntheir child, container widgets need to request something either in\ncontext of their children or in context of their allocation\ncapabilities.</para></note>"
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "grab_broken_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventGrabBroken", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "grab_focus", 
                "parameters": null, 
                "description": "Causes @widget to have the keyboard focus for the #GtkWindow it's\ninside. @widget must be a focusable widget, such as a #GtkEntry;\nsomething like #GtkFrame won't work.\n\nMore precisely, it must have the %GTK_CAN_FOCUS flag set. Use\ngtk_widget_set_can_focus() to modify that flag.\n\nThe widget also needs to be realized and mapped. This is indicated by the\nrelated signals. Grabbing the focus immediately after creating the widget\nwill likely fail and cause critical warnings."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "grab_notify", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "was_grabbed", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "hide", 
                "parameters": null, 
                "description": "Reverses the effects of gtk_widget_show(), causing the widget to be\nhidden (invisible to the user)."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "hierarchy_changed", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Widget", 
                        "name": "previous_toplevel", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "key_press_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventKey", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "key_release_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventKey", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if stopping keyboard navigation is fine, %FALSE"
                }, 
                "version": "2.12", 
                "name": "keynav_failed", 
                "parameters": [
                    {
                        "type": "ref:Gtk.DirectionType", 
                        "name": "direction", 
                        "description": "direction of focus movement"
                    }
                ], 
                "description": "This function should be called whenever keyboard navigation within\na single widget hits a boundary. The function emits the\n#GtkWidget::keynav-failed signal on the widget and its return\nvalue should be interpreted in a way similar to the return value of\ngtk_widget_child_focus():\n\nWhen %TRUE is returned, stay in the widget, the failed keyboard\nnavigation is Ok and/or there is nowhere we can/should move the\nfocus to.\n\nWhen %FALSE is returned, the caller should continue with keyboard\nnavigation outside the widget, e.g. by calling\ngtk_widget_child_focus() on the widget's toplevel.\n\nThe default ::keynav-failed handler returns %TRUE for\n%GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other\nvalues of #GtkDirectionType, it looks at the\n#GtkSettings:gtk-keynav-cursor-only setting and returns %FALSE\nif the setting is %TRUE. This way the entire user interface\nbecomes cursor-navigatable on input devices such as mobile phones\nwhich only have cursor keys but no tab key.\n\nWhenever the default handler returns %TRUE, it also calls\ngtk_widget_error_bell() to notify the user of the failed keyboard\nnavigation.\n\nA use case for providing an own implementation of ::keynav-failed\n(either by connecting to it or by overriding it) would be a row of\n#GtkEntry widgets where the user should be able to navigate the\nentire row with the cursor keys, as e.g. known from user interfaces\nthat require entering license keys.\n\nif the emitting widget should try to handle the keyboard\nnavigation attempt in its parent container(s)."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "leave_notify_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventCrossing", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "map", 
                "parameters": null, 
                "description": "This function is only for use in widget implementations. Causes\na widget to be mapped if it isn't already."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "map_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventAny", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": "%TRUE if the signal has been handled"
                }, 
                "version": "", 
                "name": "mnemonic_activate", 
                "parameters": [
                    {
                        "type": "Boolean", 
                        "name": "group_cycling", 
                        "description": "%TRUE if there are other widgets with the same mnemonic"
                    }
                ], 
                "description": "Emits the #GtkWidget::mnemonic-activate signal.\n\nThe default handler for this signal activates the @widget if\n@group_cycling is %FALSE, and just grabs the focus if @group_cycling\nis %TRUE."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "motion_notify_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventMotion", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "move_focus", 
                "parameters": [
                    {
                        "type": "ref:Gtk.DirectionType", 
                        "name": "direction", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "parent_set", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Widget", 
                        "name": "previous_parent", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "popup_menu", 
                "parameters": null, 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "property_notify_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventProperty", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "proximity_in_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventProximity", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "proximity_out_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventProximity", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "query_tooltip", 
                "parameters": [
                    {
                        "type": "Integer", 
                        "name": "x", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "y", 
                        "description": ""
                    }, 
                    {
                        "type": "Boolean", 
                        "name": "keyboard_tooltip", 
                        "description": ""
                    }, 
                    {
                        "type": "ref:Gtk.Tooltip", 
                        "name": "tooltip", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "realize", 
                "parameters": null, 
                "description": "Creates the GDK (windowing system) resources associated with a\nwidget.  For example, @widget->window will be created when a widget\nis realized.  Normally realization happens implicitly; if you show\na widget and all its parent containers, then the widget will be\nrealized and mapped automatically.\n\nRealizing a widget requires all\nthe widget's parent widgets to be realized; calling\ngtk_widget_realize() realizes the widget's parents in addition to\n@widget itself. If a widget is not yet inside a toplevel window\nwhen you realize it, bad things will happen.\n\nThis function is primarily used in widget implementations, and\nisn't very useful otherwise. Many times when you think you might\nneed it, a better approach is to connect to a signal that will be\ncalled after the widget is realized automatically, such as\n#GtkWidget::draw. Or simply g_signal_connect () to the\n#GtkWidget::realize signal."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "screen_changed", 
                "parameters": [
                    {
                        "type": "Gdk.Screen", 
                        "name": "previous_screen", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "scroll_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventScroll", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "selection_clear_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventSelection", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "selection_get", 
                "parameters": [
                    {
                        "type": "ref:Gtk.SelectionData", 
                        "name": "selection_data", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "info", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "time_", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "selection_notify_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventSelection", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "selection_received", 
                "parameters": [
                    {
                        "type": "ref:Gtk.SelectionData", 
                        "name": "selection_data", 
                        "description": ""
                    }, 
                    {
                        "type": "Integer", 
                        "name": "time_", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "selection_request_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventSelection", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "show", 
                "parameters": null, 
                "description": "Flags a widget to be displayed. Any widget that isn't shown will\nnot appear on the screen. If you want to show all the widgets in a\ncontainer, it's easier to call gtk_widget_show_all() on the\ncontainer, instead of individually showing the widgets.\n\nRemember that you have to show the containers containing a widget,\nin addition to the widget itself, before it will appear onscreen.\n\nWhen a toplevel container is shown, it is immediately realized and\nmapped; other shown widgets are realized and mapped when their\ntoplevel container is realized and mapped."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "show_all", 
                "parameters": null, 
                "description": "Recursively shows a widget, and any child widgets (if the widget is\na container)."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "show_help", 
                "parameters": [
                    {
                        "type": "ref:Gtk.WidgetHelpType", 
                        "name": "help_type", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "size_allocate", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Allocation", 
                        "name": "allocation", 
                        "description": "position and size to be allocated to @widget"
                    }
                ], 
                "description": "This function is only used by #GtkContainer subclasses, to assign a size\nand position to their child widgets.\n\nIn this function, the allocation may be adjusted. It will be forced\nto a 1x1 minimum size, and the adjust_size_allocation virtual\nmethod on the child will be used to adjust the allocation. Standard\nadjustments include removing the widget's margins, and applying the\nwidget's #GtkWidget:halign and #GtkWidget:valign properties."
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "state_changed", 
                "parameters": [
                    {
                        "type": "ref:Gtk.StateType", 
                        "name": "previous_state", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "state_flags_changed", 
                "parameters": [
                    {
                        "type": "ref:Gtk.StateFlags", 
                        "name": "previous_state_flags", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "style_set", 
                "parameters": [
                    {
                        "type": "ref:Gtk.Style", 
                        "name": "previous_style", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "style_updated", 
                "parameters": null, 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "touch_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventTouch", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "unmap", 
                "parameters": null, 
                "description": "This function is only for use in widget implementations. Causes\na widget to be unmapped if it's currently mapped."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "unmap_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventAny", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "void", 
                    "description": ""
                }, 
                "version": "", 
                "name": "unrealize", 
                "parameters": null, 
                "description": "This function is only useful in widget implementations.\nCauses a widget to be unrealized (frees all GDK resources\nassociated with the widget, such as @widget->window)."
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "visibility_notify_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventVisibility", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }, 
            {
                "returns": {
                    "type": "Boolean", 
                    "description": ""
                }, 
                "version": "", 
                "name": "window_state_event", 
                "parameters": [
                    {
                        "type": "Gdk.EventWindowState", 
                        "name": "event", 
                        "description": ""
                    }
                ], 
                "description": ""
            }
        ], 
        "properties": [
            {
                "writable": false, 
                "type": "Boolean", 
                "readable": false, 
                "name": "app-paintable", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "Boolean", 
                "readable": false, 
                "name": "can-default", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "Boolean", 
                "readable": false, 
                "name": "can-focus", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "Boolean", 
                "readable": false, 
                "name": "composite-child", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "Boolean", 
                "readable": false, 
                "name": "double-buffered", 
                "description": "Whether the widget is double buffered."
            }, 
            {
                "writable": false, 
                "type": "Gdk.EventMask", 
                "readable": false, 
                "name": "events", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "Boolean", 
                "readable": false, 
                "name": "expand", 
                "description": "Whether to expand in both directions. Setting this sets both #GtkWidget:hexpand and #GtkWidget:vexpand"
            }, 
            {
                "writable": false, 
                "type": "Gtk.Align", 
                "readable": false, 
                "name": "halign", 
                "description": "How to distribute horizontal space if widget gets extra space, see #GtkAlign"
            }, 
            {
                "writable": false, 
                "type": "Boolean", 
                "readable": false, 
                "name": "has-default", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "Boolean", 
                "readable": false, 
                "name": "has-focus", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "Boolean", 
                "readable": false, 
                "name": "has-tooltip", 
                "description": "Enables or disables the emission of #GtkWidget::query-tooltip on @widget.\nA value of %TRUE indicates that @widget can have a tooltip, in this case\nthe widget will be queried using #GtkWidget::query-tooltip to determine\nwhether it will provide a tooltip or not.\n\nNote that setting this property to %TRUE for the first time will change\nthe event masks of the GdkWindows of this widget to include leave-notify\nand motion-notify events.  This cannot and will not be undone when the\nproperty is set to %FALSE again."
            }, 
            {
                "writable": false, 
                "type": "Integer", 
                "readable": false, 
                "name": "height-request", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "Boolean", 
                "readable": false, 
                "name": "hexpand", 
                "description": "Whether to expand horizontally. See gtk_widget_set_hexpand()."
            }, 
            {
                "writable": false, 
                "type": "Boolean", 
                "readable": false, 
                "name": "hexpand-set", 
                "description": "Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set()."
            }, 
            {
                "writable": false, 
                "type": "Boolean", 
                "readable": false, 
                "name": "is-focus", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "Integer", 
                "readable": false, 
                "name": "margin", 
                "description": "Sets all four sides' margin at once. If read, returns max\nmargin on any side."
            }, 
            {
                "writable": false, 
                "type": "Integer", 
                "readable": false, 
                "name": "margin-bottom", 
                "description": "Margin on bottom side of widget.\n\nThis property adds margin outside of the widget's normal size\nrequest, the margin will be added in addition to the size from\ngtk_widget_set_size_request() for example."
            }, 
            {
                "writable": false, 
                "type": "Integer", 
                "readable": false, 
                "name": "margin-left", 
                "description": "Margin on left side of widget.\n\nThis property adds margin outside of the widget's normal size\nrequest, the margin will be added in addition to the size from\ngtk_widget_set_size_request() for example."
            }, 
            {
                "writable": false, 
                "type": "Integer", 
                "readable": false, 
                "name": "margin-right", 
                "description": "Margin on right side of widget.\n\nThis property adds margin outside of the widget's normal size\nrequest, the margin will be added in addition to the size from\ngtk_widget_set_size_request() for example."
            }, 
            {
                "writable": false, 
                "type": "Integer", 
                "readable": false, 
                "name": "margin-top", 
                "description": "Margin on top side of widget.\n\nThis property adds margin outside of the widget's normal size\nrequest, the margin will be added in addition to the size from\ngtk_widget_set_size_request() for example."
            }, 
            {
                "writable": false, 
                "type": "String", 
                "readable": false, 
                "name": "name", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "Boolean", 
                "readable": false, 
                "name": "no-show-all", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "Gtk.Container", 
                "readable": false, 
                "name": "parent", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "Boolean", 
                "readable": false, 
                "name": "receives-default", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "Boolean", 
                "readable": false, 
                "name": "sensitive", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "Gtk.Style", 
                "readable": false, 
                "name": "style", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "String", 
                "readable": false, 
                "name": "tooltip-markup", 
                "description": "Sets the text of tooltip to be the given string, which is marked up\nwith the <link linkend=\"PangoMarkupFormat\">Pango text markup language</link>.\nAlso see gtk_tooltip_set_markup().\n\nThis is a convenience property which will take care of getting the\ntooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip\nwill automatically be set to %TRUE and there will be taken care of\n#GtkWidget::query-tooltip in the default signal handler."
            }, 
            {
                "writable": false, 
                "type": "String", 
                "readable": false, 
                "name": "tooltip-text", 
                "description": "Sets the text of tooltip to be the given string.\n\nAlso see gtk_tooltip_set_text().\n\nThis is a convenience property which will take care of getting the\ntooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip\nwill automatically be set to %TRUE and there will be taken care of\n#GtkWidget::query-tooltip in the default signal handler."
            }, 
            {
                "writable": false, 
                "type": "Gtk.Align", 
                "readable": false, 
                "name": "valign", 
                "description": "How to distribute vertical space if widget gets extra space, see #GtkAlign"
            }, 
            {
                "writable": false, 
                "type": "Boolean", 
                "readable": false, 
                "name": "vexpand", 
                "description": "Whether to expand vertically. See gtk_widget_set_vexpand()."
            }, 
            {
                "writable": false, 
                "type": "Boolean", 
                "readable": false, 
                "name": "vexpand-set", 
                "description": "Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set()."
            }, 
            {
                "writable": false, 
                "type": "Boolean", 
                "readable": false, 
                "name": "visible", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "Integer", 
                "readable": false, 
                "name": "width-request", 
                "description": ""
            }, 
            {
                "writable": false, 
                "type": "Gdk.Window", 
                "readable": false, 
                "name": "window", 
                "description": "The widget's window if it is realized, %NULL otherwise."
            }
        ]
    }, 
    "fullname": "Class Gtk.Widget", 
    "id": "Docs-Widget", 
    "description": "GtkWidget is the base class all widgets in GTK+ derive from. It manages the\nwidget lifecycle, states and style.\n\n<refsect2 id=\"geometry-management\">\n<title>Height-for-width Geometry Management</title>\n<para>\nGTK+ uses a height-for-width (and width-for-height) geometry management\nsystem. Height-for-width means that a widget can change how much\nvertical space it needs, depending on the amount of horizontal space\nthat it is given (and similar for width-for-height). The most common\nexample is a label that reflows to fill up the available width, wraps\nto fewer lines, and therefore needs less height.\n\nHeight-for-width geometry management is implemented in GTK+ by way\nof five virtual methods:\n<itemizedlist>\n<listitem>#GtkWidgetClass.get_request_mode()</listitem>\n<listitem>#GtkWidgetClass.get_preferred_width()</listitem>\n<listitem>#GtkWidgetClass.get_preferred_height()</listitem>\n<listitem>#GtkWidgetClass.get_preferred_height_for_width()</listitem>\n<listitem>#GtkWidgetClass.get_preferred_width_for_height()</listitem>\n</itemizedlist>\n\nThere are some important things to keep in mind when implementing\nheight-for-width and when using it in container implementations.\n\nThe geometry management system will query a widget hierarchy in\nonly one orientation at a time. When widgets are initially queried\nfor their minimum sizes it is generally done in two initial passes\nin the #GtkSizeRequestMode chosen by the toplevel.\n\nFor example, when queried in the normal\n%GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH mode:\nFirst, the default minimum and natural width for each widget\nin the interface will be computed using gtk_widget_get_preferred_width().\nBecause the preferred widths for each container depend on the preferred\nwidths of their children, this information propagates up the hierarchy,\nand finally a minimum and natural width is determined for the entire\ntoplevel. Next, the toplevel will use the minimum width to query for the\nminimum height contextual to that width using\ngtk_widget_get_preferred_height_for_width(), which will also be a highly\nrecursive operation. The minimum height for the minimum width is normally\nused to set the minimum size constraint on the toplevel\n(unless gtk_window_set_geometry_hints() is explicitly used instead).\n\nAfter the toplevel window has initially requested its size in both\ndimensions it can go on to allocate itself a reasonable size (or a size\npreviously specified with gtk_window_set_default_size()). During the\nrecursive allocation process it's important to note that request cycles\nwill be recursively executed while container widgets allocate their children.\nEach container widget, once allocated a size, will go on to first share the\nspace in one orientation among its children and then request each child's\nheight for its target allocated width or its width for allocated height,\ndepending. In this way a #GtkWidget will typically be requested its size\na number of times before actually being allocated a size. The size a\nwidget is finally allocated can of course differ from the size it has\nrequested. For this reason, #GtkWidget caches a  small number of results\nto avoid re-querying for the same sizes in one allocation cycle.\n\nSee <link linkend=\"container-geometry-management\">GtkContainer's\ngeometry management section</link>\nto learn more about how height-for-width allocations are performed\nby container widgets.\n\nIf a widget does move content around to intelligently use up the\nallocated size then it must support the request in both\n#GtkSizeRequestModes even if the widget in question only\ntrades sizes in a single orientation.\n\nFor instance, a #GtkLabel that does height-for-width word wrapping\nwill not expect to have #GtkWidgetClass.get_preferred_height() called\nbecause that call is specific to a width-for-height request. In this\ncase the label must return the height required for its own minimum\npossible width. By following this rule any widget that handles\nheight-for-width or width-for-height requests will always be allocated\nat least enough space to fit its own content.\n\nHere are some examples of how a %GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH widget\ngenerally deals with width-for-height requests, for #GtkWidgetClass.get_preferred_height()\nit will do:\n<programlisting><![CDATA[\nstatic void\nfoo_widget_get_preferred_height (GtkWidget *widget, gint *min_height, gint *nat_height)\n{\nif (i_am_in_height_for_width_mode)\n{\ngint min_width;\n\nGTK_WIDGET_GET_CLASS (widget)->get_preferred_width (widget, &min_width, NULL);\nGTK_WIDGET_GET_CLASS (widget)->get_preferred_height_for_width (widget, min_width,\nmin_height, nat_height);\n}\nelse\n{\n... some widgets do both. For instance, if a GtkLabel is rotated to 90 degrees\nit will return the minimum and natural height for the rotated label here.\n}\n}\n]]></programlisting>\n\nAnd in #GtkWidgetClass.get_preferred_width_for_height() it will simply return\nthe minimum and natural width:\n\n<programlisting><![CDATA[\nstatic void\nfoo_widget_get_preferred_width_for_height (GtkWidget *widget, gint for_height,\ngint *min_width, gint *nat_width)\n{\nif (i_am_in_height_for_width_mode)\n{\nGTK_WIDGET_GET_CLASS (widget)->get_preferred_width (widget, min_width, nat_width);\n}\nelse\n{\n... again if a widget is sometimes operating in width-for-height mode\n(like a rotated GtkLabel) it can go ahead and do its real width for\nheight calculation here.\n}\n}\n]]></programlisting>\n\nOften a widget needs to get its own request during size request or\nallocation. For example, when computing height it may need to also\ncompute width. Or when deciding how to use an allocation, the widget\nmay need to know its natural size. In these cases, the widget should\nbe careful to call its virtual methods directly, like this:\n<example>\n<title>Widget calling its own size request method.</title>\n<programlisting>\nGTK_WIDGET_GET_CLASS(widget)-&gt;get_preferred_width (widget),\n&min, &natural);\n</programlisting>\n</example>\n\nIt will not work to use the wrapper functions, such as\ngtk_widget_get_preferred_width() inside your own size request\nimplementation. These return a request adjusted by #GtkSizeGroup\nand by the #GtkWidgetClass.adjust_size_request() virtual method. If a\nwidget used the wrappers inside its virtual method implementations,\nthen the adjustments (such as widget margins) would be applied\ntwice. GTK+ therefore does not allow this and will warn if you try\nto do it.\n\nOf course if you are getting the size request for\n<emphasis>another</emphasis> widget, such as a child of a\ncontainer, you <emphasis>must</emphasis> use the wrapper APIs.\nOtherwise, you would not properly consider widget margins,\n#GtkSizeGroup, and so forth.\n</para>\n</refsect2>\n<refsect2 id=\"style-properties\">\n<title>Style Properties</title>\n<para>\n<structname>GtkWidget</structname> introduces <firstterm>style\nproperties</firstterm> - these are basically object properties that are stored\nnot on the object, but in the style object associated to the widget. Style\nproperties are set in <link linkend=\"gtk-Resource-Files\">resource files</link>.\nThis mechanism is used for configuring such things as the location of the\nscrollbar arrows through the theme, giving theme authors more control over the\nlook of applications without the need to write a theme engine in C.\n</para>\n<para>\nUse gtk_widget_class_install_style_property() to install style properties for\na widget class, gtk_widget_class_find_style_property() or\ngtk_widget_class_list_style_properties() to get information about existing\nstyle properties and gtk_widget_style_get_property(), gtk_widget_style_get() or\ngtk_widget_style_get_valist() to obtain the value of a style property.\n</para>\n</refsect2>\n<refsect2 id=\"GtkWidget-BUILDER-UI\">\n<title>GtkWidget as GtkBuildable</title>\n<para>\nThe GtkWidget implementation of the GtkBuildable interface supports a\ncustom &lt;accelerator&gt; element, which has attributes named key,\nmodifiers and signal and allows to specify accelerators.\n</para>\n<example>\n<title>A UI definition fragment specifying an accelerator</title>\n<programlisting><![CDATA[\n<object class=\"GtkButton\">\n<accelerator key=\"q\" modifiers=\"GDK_CONTROL_MASK\" signal=\"clicked\"/>\n</object>\n]]></programlisting>\n</example>\n<para>\nIn addition to accelerators, <structname>GtkWidget</structname> also support a\ncustom &lt;accessible&gt; element, which supports actions and relations.\nProperties on the accessible implementation of an object can be set by accessing the\ninternal child \"accessible\" of a <structname>GtkWidget</structname>.\n</para>\n<example>\n<title>A UI definition fragment specifying an accessible</title>\n<programlisting><![CDATA[\n<object class=\"GtkButton\" id=\"label1\"/>\n<property name=\"label\">I am a Label for a Button</property>\n</object>\n<object class=\"GtkButton\" id=\"button1\">\n<accessibility>\n<action action_name=\"click\" translatable=\"yes\">Click the button.</action>\n<relation target=\"label1\" type=\"labelled-by\"/>\n</accessibility>\n<child internal-child=\"accessible\">\n<object class=\"AtkObject\" id=\"a11y-button1\">\n<property name=\"AtkObject::name\">Clickable Button</property>\n</object>\n</child>\n</object>\n]]></programlisting>\n</example>\n<para>\nFinally, GtkWidget allows style information such as style classes to\nbe associated with widgets, using the custom &lt;style&gt; element:\n<example>\n<title>A UI definition fragment specifying an style class</title>\n<programlisting><![CDATA[\n<object class=\"GtkButton\" id=\"button1\">\n<style>\n<class name=\"my-special-button-class\"/>\n<class name=\"dark-button\"/>\n</style>\n</object>\n]]></programlisting>\n</example>\n</para>\n</refsect2>"
}